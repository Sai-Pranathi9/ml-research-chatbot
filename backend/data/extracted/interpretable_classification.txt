1
Opportunities and Challenges in Explainable
Artiﬁcial Intelligence (XAI): A Survey
Arun Das, Graduate Student Member, IEEE, and Paul Rad, Senior Member, IEEE
Abstract—Nowadays, deep neural networks are widely used in
mission critical systems such as healthcare, self-driving vehicles,
and military which have direct impact on human lives. However,
the black-box nature of deep neural networks challenges its use in
mission critical applications, raising ethical and judicial concerns
inducing lack of trust. Explainable Artiﬁcial Intelligence (XAI)
is a ﬁeld of Artiﬁcial Intelligence (AI) that promotes a set of
tools, techniques, and algorithms that can generate high-quality
interpretable, intuitive, human-understandable explanations of
AI decisions. In addition to providing a holistic view of the
current XAI landscape in deep learning, this paper provides
mathematical summaries of seminal work. We start by proposing
a taxonomy and categorizing the XAI techniques based on
their scope of explanations, methodology behind the algorithms,
and explanation level or usage which helps build trustworthy,
interpretable, and self-explanatory deep learning models. We
then describe the main principles used in XAI research and
present the historical timeline for landmark studies in XAI
from 2007 to 2020. After explaining each category of algorithms
and approaches in detail, we then evaluate the explanation
maps generated by eight XAI algorithms on image data, discuss
the limitations of this approach, and provide potential future
directions to improve XAI evaluation.
Index Terms—explainable ai, xai, interpretable deep learning,
machine learning, computer vision, neural network.
I. INTRODUCTION
Artiﬁcial Intelligence (AI) based algorithms, especially using
deep neural networks, are transforming the way we approach
real-world tasks done by humans. Recent years have seen
a surge in the use of Machine Learning (ML) algorithms
in automating various facets of science, business, and social
workﬂow. The surge is partly due to the uptick of research in a
ﬁeld of ML, called Deep Learning (DL), where thousands (even
billions) of neuronal parameters are trained to generalize on
carrying out a particular task. Successful use of DL algorithms
in healthcare [1]–[3], ophthalmology [4]–[6], developmental
disorders [7]–[9], in autonomous robots and vehicles [10]–[12],
in image processing classiﬁcation and detection [13], [14], in
speech and audio processing [15], [16], cyber-security [17],
[18], and many more indicate the reach of DL algorithms in
our daily lives. Easier access to high-performance compute
nodes using cloud computing ecosystems, high-throughput AI
accelerators to enhance performance, and access to big-data
This work has been submitted to the IEEE for possible publication. Copyright
may be transferred without notice, after which this version may no longer be
accessible.
A. Das is with the Department of Electrical and Computer Engineering,
University of Texas at San Antonio, San Antonio, TX, 78249 USA. e-mail:
arun.das@utsa.edu.
P. Rad is with the Department of Information Systems and Cyber Security,
University of Texas at San Antonio, San Antonio, TX, 78249 USA. e-mail:
peyman.najaﬁrad@utsa.edu.
scale datasets and storage enables deep learning providers to
research, test, and operate ML algorithms at scale in small edge
devices [19], smartphones [20], and AI-based web-services
using Application Programming Interfaces (APIs) for wider
exposure to any applications.
The large number of parameters in Deep Neural Networks
(DNNs) make them complex to understand and undeniably
harder to interpret. Regardless of the cross-validation accuracy
or other evaluation parameters which might indicate a good
learning performance, deep learning (DL) models could inher-
ently learn or fail to learn representations from the data which
a human might consider important. Explaining the decisions
made by DNNs require knowledge of the internal operations
of DNNs, missing with non-AI-experts and end-users who are
more focused on getting accurate solution. Hence, often the
ability to interpret AI decisions are deemed secondary in the
race to achieve state-of-the-art results or crossing human-level
accuracy.
Recent interest in XAI, even from governments especially
with the European General Data Protection Regulation (GDPR)
[21] regulation, shows the important realization of the ethics
[22]–[26], trust [27]–[29], bias [30]–[33] of AI, as well as the
impact of adversarial examples [34]–[37] in fooling classiﬁer
decisions. In [38], Miller et al. describes that curiosity is
one of the primary reason why people ask for explanations
to speciﬁc decisions. Another reason might be to facilitate
better learning - to reiterate model design and generate better
results. Each explanation should be consistent across similar
data points and generate stable or similar explanation on the
same data point over time [39]. Explanations should make
the AI algorithm expressive to improve human understanding,
conﬁdence in decision making, and promote impartial and just
decisions. Thus, in order to maintain transparency, trust, and
fairness in the ML decision-making process, an explanation or
an interpretable solution is required for ML systems.
An explanation is a way to verify the output decision made
by an AI agent or algorithm. For a cancer detection model
using microscopic images, an explanation might mean a map
of input pixels which contribute to the model output. For a
speech recognition model, an explanation might be the power
spectrum information during a speciﬁc time which contributed
more towards the current output decision. Explanations can
be also based on the parameters or activations of the trained
models explained either by using surrogates such as decision
trees or by using gradients or other methods. In the context
of reinforcement learning algorithms, an explanation might be
given as to why an agent made a certain decision over another.
However, the deﬁnitions of interpretable and explainable AI
are often generic and might be misleading [40] and should
arXiv:2006.11371v2  [cs.CV]  23 Jun 2020
2
XAI
Scope: Where is the XAI
method focusing on?
Is it on a local instance
or trying to understand
the model as a whole?
Methodology: What is the
algorithmic approach?
Is it focused on the
input data instance or
the model parameters?
Usage: How is the XAI
method developed? Is it
integrated to the model
or can be applied to
any model in general?
Local: Mainly focus on
explanation of individual
data instances. Generates
one explanation map g per
data x ∈X.
Global: Tries to understand
the model as a whole.
Generally takes a group of
data instances to generate
one or more explanation
maps.
BackProb: Core algorithmic
logic is dependent on
gradients that are back-
propagated from the output
prediction layer back to the
input layer.
Perturbation: Core algorith-
mic logic is dependent on
random or carefully chosen
changes to features in the
input data instance.
Intrinsic: Explainability is
baked into the neural net-
work architecture itself and
is generally not transferrable
to other architectures.
Post-Hoc: XAI algorithm is
not dependent on the model
architecture and can be
applied to already trained
neural networks.
Fig. 1. General categorization of the survey in terms of scope, methodology, and usage.
integrate some form of reasoning [41].
A collection of AI models, such as decision-trees and rule-
based models, is inherently interpretable. However, there are
affected by the drawbacks of Interpretability-versus-Accuracy
trade-off compared to the Deep Learning models. This pa-
per discusses the different approaches and perspectives of
researchers to address the problem of the explainability of deep
learning algorithms. Methods can be used effectively if the
model parameters and architecture are already known. However,
modern API-based AI services produce more challenges
because of the relative ‘black-box’ [42] nature of the problem
where the end-user has information only on the input provided
to the deep learning model and not the model itself.
In this survey, we present a comprehensive overview of
explainable and interpretable algorithms with a timeline of
important events and research publications into three well-
deﬁned taxonomies as illustrated in Figure 1. Unlike many other
surveys which only categorize and summarize the published
research in a high-level, we provide additional mathematical
overviews and algorithms of seminal works in the ﬁeld of
XAI. The algorithms presented in the survey are clustered into
three well-deﬁned categories which are described in detail in
the following sections. Various evaluation techniques for XAI
presented in literature are also discussed along with discussion
on the limitations and future directions of these methods.
Our contributions can be summarized as the following:
1) In order to systematically analyze explainable and inter-
pretable algorithms in deep learning, we taxonomize XAI
to three well-deﬁned categories to improve clarity and
accessibility of the approaches.
2) We examine, summarize and classify the core mathemati-
cal model and algorithms of recent XAI research on the
proposed taxonomy and discuss the timeline for seminal
work.
3) We generate and compare the explanation maps for
eight different XAI algorithms, outline the limitations
of this approach, and discuss potential future directions to
improve trust, transparency, and bias and fairness using
deep neural network explanations.
Our survey is based on published research, from the year
2007 to 2020, from various search sources including Google
Scholar, ACM Digital Library, IEEEXplore, ScienceDirect,
Spinger, and preprints from arXiv. Keywords such as explain-
able artiﬁcial intelligence, XAI, explainable machine learning,
explainable deep learning, interpretable machine learning were
used as search parameters.
II. TAXONOMIES AND ORGANIZATION
Prior published survey’s on general explainability have
classiﬁed XAI techniques based on scope and usage [43].
Key differences of this survey are classiﬁcation based on
methodology behind the XAI algorithms for deep learning,
focus on mathematical summaries of the seminal papers, and
evaluation strategies for XAI algorithms. We also mention
popular open-source software implementations of various algo-
rithms described in this survey. We summarize the taxonomies
discussed in the survey in this section based on the illustration
provided in Figure 1:
• Scope: Scope of explanations can be either local or
global. Some methods can be extended to both. Locally
explainable methods are designed to express, in general,
the individual feature attributions of a single instance of
input data x from the data population X. For example,
given a text document and a model to understand the
sentiment of text, a locally explainable model might
generate attribution scores for individual words in the
text. Globally explainable models provide insight into
the decision of the model as a whole - leading to an
understanding about attributions for an array of input data.
Local and global scope of explanations are described in
detail in Section IV.
• Methodology: Core algorithmic concept behind the ex-
plainable model can generally be categorized based on the
methodology of implementation. In general, both local and
global explainable algorithms can be categorized as either
3
backpropagation-based or perturbation-based methods. In
backpropagation-based methods, the explainable algorithm
does one or more forward pass through the neural network
and generates attributions during the backpropagation
stage utilizing partial derivatives of the activations. Exam-
ples include saliency maps, saliency relevance maps, and
class activation maps.
Perturbation-based explainable algorithms focus on per-
turbing the feature set of a given input instance by either
using occlusion, partially substituting features using ﬁlling
operations or generative algorithms, masking, conditional
sampling, etc. Here, generally, only forward pass is enough
to generate the attribution representations without the
need for backpropagating gradients. These methodology
differences are described in Section V.
• Usage: A well developed explainable method with a
speciﬁc scope and methodology can be either embedded to
the neural network model itself or applied as an external
algorithm for explanation. Any explainable algorithm
which is dependent on the model architecture fall into the
model-intrinsic category. Most model-intrinsic algorithms
are model-speciﬁc such that any change in the architecture
will need signiﬁcant changes in the method itself or minor
changes of hyperparameters of the explainable algorithm.
Generally, signiﬁcant research interest is seen in devel-
oping model-agnostic post-hoc explanations, where the
predictions of an already existing well-performing neural
network model can be explained using ad-hoc explainable
methods. Post-hoc methods are also widely applied in
variety of input modalities such as images, text, tabular
data, etc. These differences in the ’usage’ of explainability
methods are described in Section VI.
In Section VII, we discuss some of the evaluation strategies
used to qualitatively or quantitatively evaluate the performance
of XAI algorithms discussed in this survey. We present a
list of desirable constraints applicable to XAI algorithms to
improve its real-world performance as well as expressiveness
in terms of transparency, trust, and bias understanding. These
desirable qualities can be used as a guide to generate novel XAI
algorithms which is favorable as well as expressive. Our study
suggests that the evaluation methods are still immature and have
an enormous potential for further research. We also provide
a list of popular software packages that are open-sourced in
GitHub platform. We chose the packages with considerable user
support and implemented algorithms. All software platforms
supports explaining either Scikit-Learn, Tensorﬂow, or PyTorch
machine learning models. After describing the evaluation
methods and software packages, we conclude our survey in
Section VIII.
In our survey, all mathematical equations and algorithms
described are based on a set of notations as described in Table
I. The mathematical equations described in the survey might
be different from their respective research publications as we
have used similar notations to describe the same mathematical
idea throughout the survey. This is done to aid the readers
and have a common repository of notations. Also, a timeline
of seminal research in the ﬁeld is illustrated in Figure 6. The
TABLE I
TABLE OF NOTATIONS
Notation
Description
x
Single instance of input data from a population
X
x\i
Set of all input features except ith feature
y
Class label of input x from a population Y
¯y
Predicted label for input x
xi
ith feature in input instance x
x(i)
Single instance from X at location i
y(i)
Single instance from Y at location i
¯y(i)
Predicted label for input x(i)
f(.)
Neural network model
θ
Parameters of the neural network
G
Explanation function
g
Explanation of a model f
zi,j(θ, x)
Activation output of node or layer j for feature
i
zj
Activation output summary of node or layer j
for all features
x∗
Activation map of input x
x
′
Binary activation map of input x
Sc
Class score function
Z
′
Coalition vector for SHAP
M
Maximum coalition size
φj ∈R
Feature attribution for feature j
R(zj)
Relevance of activation zj
I
Input image
timeline provides information such as the name of the XAI
method, name of ﬁrst author, and year of publication.
III. DEFINITIONS AND PRELIMINARIES
Various prior publications debate the nuances in deﬁning
Explainability and Interpretability of neural networks [44],
[45]. We support the general concept of explainable AI as a
suite of techniques and algorithms designed to improve the
trustworthiness and transparency of AI systems. Explanations
are described as extra metadata information from the AI model
that offers insight into a speciﬁc AI decision or the internal
functionality of the AI model as a whole. Various Explainability
approaches applied to Deep Neural Networks are presented
in this literature survey. Figure 2 illustrates one such deep
learning model which takes one input and generates one output
prediction. Goal of explainable algorithms applied to deep
neural networks are towards explaining these predictions using
various methods summarized in this survey.
Fig. 2. High-level illustration of deep learning model f. Generally, a single
input instance x generates outputs ¯y. No other metadata or explanations are
generated other than the output classiﬁcation. Most model inference scenarios
involve this method where model f is considered as a blob of information
which takes an input x and generates an output ¯y
Generally, for an input x ∈Rd, a deep learning model
function f(θ) describes f : Rd →RC, where C is the
number of output classes and θ the parameters of the model
4
in a classiﬁcation problem. Now, the model inference can be
described as ¯y = f(θ, x) where ¯y is the output prediction.
We now deﬁne the key concepts explored in the survey, namely
explainability of deep learning models. Further sections of the
survey explain these deﬁnitions in ﬁner detail.
Deﬁnition 1:
Interpretability is a desirable quality or
feature of an algorithm which provides enough expressive
data to understand how the algorithm works.
Here, interpretable domains could include images or text
which are comprehensible by humans. Cambridge Dictionary
deﬁnes: “If something is interpretable, it is possible to ﬁnd its
meaning or possible to ﬁnd a particular meaning in it”.
Deﬁnition 2: Interpretation is a simpliﬁed representation
of a complex domain, such as outputs generated by a machine
learning model, to meaningful concepts which are human-
understandable and reasonable.
Output predictions of a simple rule-based model can be
easily interpreted by traversing the rule-set. Similarly a small
decision tree can be easily understood. Or the Deep Convolution
Networks (CNN) model that can identify the parts of the input
image that led to the decision.
Deﬁnition 3: An explanation is additional meta information,
generated by an external algorithm or by the machine learning
model itself, to describe the feature importance or relevance
of an input instance towards a particular output classiﬁcation.
For a deep learning model f with input x and output
prediction of ¯y of class c, an explanation g can be generated,
generally as an explanation map E, where E : Rd →Rd.
Here, g is an object of same shape as the input which describes
the feature importance or relevance of that particular dimension
to the class output. For an image, the explanation map can
be an equally sized pixel map whereas for text, it might be
word-by-word inﬂuence scores.
Deﬁnition 4: For a deep learning model f, if the model
parameters θ and the model architecture information are known,
the model is considered a white-box.
A white-box model improves model-debugging and promotes
trust. However, knowing the model architecture and parameters
alone won’t make the model explainable.
Deﬁnition 5:
A deep learning model f is considered a
black-box if the model parameters and network architectures
are hidden from the end-user.
Typically, deep learning models served on web-based ser-
vices or restricted business platforms are exposed using APIs
which takes an input form the user and provides the model
result as text, visual, or auditory presentation respective to the
expected model output ¯y.
A. Why Is Research on XAI Important?
With the use of AI algorithms in healthcare [46], credit
scoring [47], loan acceptance [48], and more, the need to
explain an ML model result is important for ethical, judicial,
as well as safety reasons. Even though there are different
facets to why XAI is important, our study suggests that the
most important concerns are three-fold: 1) trustability, 2)
transparency, and 3) bias and fairness of AI algorithms. Current
business models include interpretation as a step before serving
Fig. 3. Illustration from [35] showing an adversarial attack where an image
class Panda is deliberately attacked to predict as a Gibbon with high conﬁdence.
Note that the attacked image is visually similar to the original image and
humans are unable to understand any changes.
Fig. 4. Illustration from [49] showing how text in images can fool classiﬁers
into believing that the text is a feature for a particular task.
the ML models on production systems, however are often
limited to small tree-based models. With the use of highly non-
linear deep learning algorithms with millions of parameters in
ML pipelines, XAI techniques must improve all three concerns
mentioned above.
1) Improves Transparency: XAI improves transparency and
fairness by creating a human-understandable justiﬁcation
to the decisions and could ﬁnd and deter adversarial
examples [35] if used properly.
Deﬁnition 6:
A deep learning model is considered
transparent if it is expressive enough to be human-
understandable. Here, transparency can be a part of the
algorithm itself or using external means such as model
decomposition or simulations.
Transparency is important to assess the quality of output
predictions and to ward off adversaries. An adversarial
example could hinder accurate decision making capabili-
ties of a classiﬁer by fooling the classiﬁer into believing
that a fake image is infact real. Figure 3 illustrates such
an example where an image of a Panda is predicted
as a Gibbon with high conﬁdence after the original
Panda image was tampered by adding some adversarial
noise. Figure 4 illustrates a classiﬁer learning to classify
based on text data such as source tags or watermarks in
advertisements in images. As we rely more on autonomous
algorithms to aid our daily lives, quality of AI algorithms
to mitigate attacks [34] and provide transparency in terms
of model understanding, textual, or visual reports should
be of prime importance.
2) Improves Trust: As a social animal, our social lives,
decisions, and judgements are primarily based on the
knowledge and available explanations to situations and
5
Fig. 5. Signiﬁcant expected improvements when using XAI techniques to
support decision making of end-users. We believe XAI is important due to
improvements in trust, transparency, and in understanding bias and fairness.
the trust we generate. A scientiﬁc explanation or logical
reasoning for a sub-optimal decision is better than a highly
conﬁdent decision without any explanations.
Deﬁnition 7: Trustability of deep learning models is a
measure of conﬁdence, as humans, as end-users, in the
intended working of a given model in dynamic real-world
environments.
Thus, ‘Why a particular decision was made’ is of prime
importance to improve the trust [77] of end-users in-
cluding subject matter experts, developers, law-makers,
and laypersons alike [78]–[80]. Fundamental explanations
to classiﬁer prediction is ever so important to stake-
holders and government agencies to build trustability as
we transition to a connected AI-driven socio-economic
environment.
3) Improves Model Bias Understanding and Fairness:
XAI promotes fairness and helps mitigate biases intro-
duced to the AI decision either from input datasets or
poor neural network architecture.
Deﬁnition 8: Bias in deep learning algorithms indicate
the disproportionate weight, prejudice, favor, or inclina-
tion of the learnt model towards subsets of data due to both
inherent biases in human data collection and deﬁciencies
in the learning algorithm.
Learning the model behavior using XAI techniques
for different input data distributions could improve our
understanding of the skewness and biases in the input data.
This could generate a robust AI model [81]. Understanding
the input space could help us invest in bias mitigation
methods and promote fairer models.
Deﬁnition 9: Fairness in deep learning is the quality of
a learnt model in providing impartial and just decisions
without favoring any populations in the input data
2020
2007
Neural Additive Model, 2020, [50] GL
Other
IN
Causal Concept Effect (CaCE), 2019, [51] GL
Other
PH
2019
Automatic Concept-based Explana-
tions, 2019, [52] GL
Other
PH
Global Attribution Mapping, 2019, [53] GL
PER
PH
Spectral Relevance Analysis, 2019, [49] GL
BP
PH
Salient Relevance (SR) Map, 2019, [54] LO
BP
PH
Randomization and Feature Test-
ing, 2019, [55] LO
PER
PH
Grad-CAM++, 2018, [56] LO
BP
PH
2018
Randomized Input Sampling for Expla-
nation, 2018, [57] LO
PER
PH
Concept Activation Vectors, 2018, [58] GL
Other
PH
Axiomatic Attributions, 2017, [59] LO
BP
PH
2017
Deep Attribution Maps, 2017, [60] LO
BP
PH
Deep Taylor Expansion, 2017, [61] LO
Other
PH
Prediction Difference Analysis, 2017, [62] LO
PER
PH
Grad-CAM, 2017, [63] LO
BP
PH
SHapley Additive exPlanations (SHAP),
2017, [64] Both
PER
PH
Local Interpretable Model-Agnostic Explana-
tions (LIME), 2016, [65] Both
PER
PH
2016
Class Activation Mapping (CAM), 2016, [66] LO
BP
PH
Guided Backprop, 2015, [67] LO
BP
PH
2015
Bayes Rule List, 2015, [68] GL
Other
IN
Layer-wise Relevance BackPropagation
(LRP), 2015, [69] Both
BP
PH
Generalized Additive Models, 2015, [70] GL
Other
IN
DeConvolution Nets, 2014, [71] LO
BP
PH
2014
Bayesian Case Model, 2014, [72] GL
Other
IN
Gradient-based Saliency Maps, 2013, [73] LO
BP
PH
2013
Activation Maximization, 2010, [74] LO
BP
PH
2010
Sparse Penalized Discriminant Anal-
ysis, 2008, [75] GL
Other
IN
2008
Bayesian Averaging, 2007, [76] GL
Other
IN
Fig. 6. A timeline of seminal works towards explainable AI algorithms is
illustrated. The grey highlights indicate scope (GL: global, LO: local, Both:
GL and LO), methodology (BP: backprop, PER: perturbation, Other: neither
BP or PER, and usage level (IN: intrinsic or PH: post-hoc) of the algorithms.
distribution.
XAI techniques could be used as a way to improve
the expressiveness and generate meaningful explanations
6
TABLE II
TABLE OF ABBREVIATIONS
Abbreviation
Deﬁnition
ACE
Automatic Concept-based Explanations
AI
Artiﬁcial Intelligence
API
Application Programming Interface
BAM
Benchmarking Attribution Methods
BRL
Bayesian Rule List
CaCE
Causal Concept Effect
CAM
Class Activation Mapping
CAV
Concept Activation Vectors
CNN
Convolutional Neural Network
DeConvNet
Deconvolution Neural Network
DL
Deep Learning
DNN
Deep Neural Network
EG
Expected Gradients
FMRI
Functional Magnetic Resonance Imaging
GAM
Generalized Additive Models
IG
Integrated Gradients
IRT
Interpretability Randomization Test
LIME
Local Interpretable Model-Agnostic Explanations
LRP
Layer-wise Relevance BackPropagation
ML
Machine Learning
NAM
Neural Additive Models
OSFT
One-Shot Feature Test
ReLU
Rectiﬁed Linear Unit
RISE
Randomized Input Sampling for Explanation
RNN
Recurrent Neural Network
SCS
System Causability Scale
SHAP
SHapley Additive exPlanations
SPDA
Sparse Penalized Discriminant Analysis
SpRAy
Spectral Relevance Analysis
SR
Salient Relevance
TCAV
Testing with Concept Activation Vectors
t-SNE
t-Stochastic Neighbor Embedding
VAE
Variational Auto Encoders
XAI
Explainable Artiﬁcial Intelligence
to feature correlations for many subspaces in the data
distribution to understand fairness in AI. By tracing back
the output prediction discriminations back to the input
using XAI techniques, we can understand the subset of
features correlated to particular class-wise decisions [82].
As we discussed previously, the use of XAI could provide a
software-engineering design on AI with a continuously evolving
model based on prior parameters, explanations, issues, and
improvements to overall design thereby reducing human bias.
However, choosing the right methods for explanation should be
done with care, while considering to bake-in interpretability to
machine learning models [40]. We now proceed with detailed
discussions as per the taxonomies.
IV. SCOPE OF EXPLANATION
A. Local Explanations
Consider a scenario where a doctor has to make a decision
based on the results of a classiﬁer output. The doctor needs
careful understanding of the model predictions and concrete
answers to the ‘Why this decision?’ question which requires
an explanation of the local data point under scrutiny. This
Fig. 7.
High-level illustration of locally explainable models. Generally, a
single input instance is used for explanations.
level of explaining individual decisions made by a classiﬁer
is categorized under locally explainable algorithms. Generally,
locally explainable methods focus on a single input data
instance to generate explanations by utilizing the different data
features. Here, we are interested in generating g for explaining
the decisions made by f for a single input instance x. A
high-level diagram is illustrated in Figure 7.
Founding research in local explanations used heatmaps, rule-
based methods, Bayesian techniques, and feature importance
matrices to understand feature correlations and importance
towards output predictions. The output explanations were
always positive real-valued matrices or vectors. Newer research
in local explainable models improves the old methods by
attribution maps, graph-based, and game-theory based models
in which we get a feature-wise score of positive and negative
correlations towards an output classiﬁcation. Here, a positive
attribution value means that the particular feature improves
output class probability and a negative value means the feature
decreased the output class probability. Mathematical equations
described in this section and the rest of the survey follows
notations tabulated in Table I.
1) Activation Maximization: Interpreting a layer-wise feature
importance of a Convolutional Neural Network (CNN) model
is simpler in the ﬁrst layer which generally learns the high-
level textures and edges. However, as we move deeper into
the CNN, importance of speciﬁc layers towards a particular
prediction is hard to summarize and visualize since parameters
of subsequent layers are inﬂuenced by that of the previous
layers. Hence, preliminary research tried to understand the
neuronal activations to input instances as well as individual
ﬁlters of speciﬁc layers.
In 2010, a locally explainable method called Activation
Maximization was introduced by Erhan et al. [74], with focus
on input patterns which maximize a given hidden unit activation.
Here, the authors set an optimization problem of maximizing
the activation of a unit. If θ is the parameters of the model,
zi,j(θ, x) is the activation of a particular unit i from layer
j. By assuming ﬁxed parameters θ, an activation map can be
found as:
x∗=
arg max
x s.t. ∥x∥=ρ
zij(θ, x)
(1)
After the optimization converges, we could either ﬁnd an
average of all local minima’s to ﬁnd an explanation map g
or pick the one which maximizes the activations. Here, the
7
Fig. 8. Image-speciﬁc class saliency maps using gradient based attribution
method is shown. Image courtesy [73].
goal is to minimize the activation maximization loss by ﬁnding
larger ﬁlter activations correlated to speciﬁc input patterns.
Thus, we could understand a layer-wise feature importance to
an input instance. It was one of the ﬁrst published research to
express feature importance of deep learning models and was
later improved by many researchers.
2) Saliency Map Visualization: Saliency map generation
in deep neural networks were ﬁrst introduced by Simonyan
et al. [73] as a way of computing the gradient of the output
class category with respect to an input image. By visualizing
the gradients, a fair summary of pixel importance can be
achieved by studying the positive gradients which had more
inﬂuence to the output. Authors introduced two techniques
of visualization: 1) class model visualizations and 2) image-
speciﬁc class visualizations as illustrated in Figure 8.
We discuss class model visualization under the global
explainable methods in Section IV-B. Image-speciﬁc class
saliency visualization technique tries to ﬁnd an approximate
class score function Sc(I), where x is the input image with
a label class c using ﬁrst-order Taylor expansion:
Sc(I) ≈wT x + b
(2)
where w is the derivative of the class score function Sc with
respect to the input image x at a speciﬁc point in the image
x0 such that:
w = ∂Sc
∂x

x0
(3)
Here, with light image processing, we can visualize the
saliency map with respect to the location of input pixels with
positive gradients.
3) Layer-wise Relevance BackPropagation (LRP): LRP
technique introduced in 2015 by Bach et al. [69] is used to ﬁnd
relevance scores for individual features in the input data by
decomposing the output predictions of the DNN. The relevance
score for each atomic input is calculated by backpropagating
the class scores of an output class node towards the input layer.
The propagation follows a strict conservation property whereby
a equal redistribution of relevance received by a neuron must be
enforced. In CNNs, LRP backpropagates information regarding
relevance of output class back to input layer, layer-by-layer. In
Recurrent Neural Networks (RNNs), relevance is propagated
to hidden states and memory cell. Zero relevance is assigned
to gates of the RNN. If we consider a simple neural network
with input instance x, a linear output y, and activation output
z, the system can be described as:
yj = P
i wijxi + bj
zj = f (yj)
(4)
If we consider R(zj) as the relevance of activation output,
the goal is to get Ri←j, that is to distribute R(zj) to the
corresponding input x:
Ri←j = R (zj)
xiwij
yj + ϵ sign (yj)
(5)
Final relevance score of individual input x is the summation
of all relevance from zj for input xi:
R (x) =
X
j
Ri←j
(6)
The LRP method have been recently extended to learn the
global explainability by using LRP explanation maps as an input
to global attribution algorithms. We discuss some such models
in section IV-B. Newer research has also shown the importance
of using methods such as LRP for model speciﬁc operations
such as network pruning [83]. Here, authors prune the least
important weights or ﬁlters of a model by understanding
the feature attributions of individual layer. This reduces the
computation and storage cost of the AI models without
signiﬁcant drop in the model accuracy. This shows another
aspect of using AI in understanding the model behavior and
utilizing the new knowledge to improve model performance.
4) Local Interpretable Model-Agnostic Explanations (LIME):
In 2016, Ribeiro et al. introduced Local Interpretable Model-
Agnostic Explanations (LIME) [65]. To derive a representation
that is understandable by humans, LIME tries to ﬁnd importance
of contiguous superpixels (a patch of pixels) in a source
image towards the output class. Hence, LIME ﬁnds a binary
vector x
′ ∈{0, 1} to represent the presence or absence of
a continuous path or ’superpixel’ that provides the highest
representation towards class output. This works on a patch-
level on a single data input. Hence, the method falls under local
explanations. There is also a global explanation model based
on LIME called SP-LIME described in the global explainable
model sub section. Here, we focus on local explanations.
Algorithm 1 LIME algorithm for local explanations
Input: classiﬁer f, input sample x, number of superpixels n,
number of features to pick m
Output: explainable coefﬁcients from the linear model
1: ¯y ←f.predict(x)
2: for i in n do
3:
pi ←Permute(x)
▷Randomly pick superpixels
4:
obsi ←f.predict(p)
5:
disti ←|¯y −obsi|
6: end for
7: simscore ←SimilarityScore(dist)
8: xpick ←Pick(p, simscore, m)
9: L ←LinearModel.fit(p, m, simscore)
10: return L.weights
8
Fig. 9. Local explanations of an image classiﬁcation prediction described using LIME [65]. Here, top three classes are ”electric guitar” (p = 0.32), ”acoustic
guitar” (p = 0.24) and ”labrador” (p = 0.21). By selecting a group of ‘superpixels’ from the input image, the classiﬁer provides visual explanations to
the top predicted labels.
Consider g ∈G, the explanation as a model from a class
of potentially interpretable models G. Here, g can be decision
trees, linear models, or other models of varying interpretability.
Let explanation complexity be measured by Ω(g). If πx(z) is
a proximity measure between two instances x and z around x,
and L(f, g, πx) represents faithfulness of g in approximating
f in locality deﬁned by πx, then, explanation ξ for the input
data sample x is given by the LIME equation:
ξ(x) = arg min
g∈G
L(f, g, πx) + Ω(g)
(7)
Now, in Equation 7, the goal of LIME optimization is
to minimize the locality-aware loss L(f, g, πx) in a model
agnostic way. Example visualization of LIME algorithm on a
single instance is illustrated in Figure 9. Algorithm 1 shows
the steps to explain the model for a single input sample and
the overall procedure of LIME. Here, for the input instance
we permute data by ﬁnding a superpixel of information (‘fake’
data). Then, we calculate distance (similarity score) between
permutations and original observations. Now, we know how
different the class scores are for the original input and the new
‘fake’ data.
We can then make predictions on new ‘fake’ data using the
complex model f. This depends on the amount of superpixels
you choose from the original data. The most descriptive feature
can be picked which improved prediction on the permuted
data. If we ﬁt a simple model, often times a locally weighted
regression model, to the permuted data with m features and
similarity scores as weights, we can use the feature weights,
or coefﬁcients, from the simple model to make explanations
for the local behavior of the complex model. Recent years
have seen many research improving and extending the LIME
algorithm to a variety of new tasks. We summarize a few of
them below:
• In [84], Mishra et al. extended LIME algorithm to music
content analysis by temporal segmentation, and frequency
and time-frequency segmentation of input mel-spectogram.
Their approach was called Sound-LIME (SLIME) and was
applied to explain the predictions of a deep vocal detector.
• In [85], Tomi Peltola described a KullbackLeibler diver-
gence based LIME called KL-LIME to explain Bayesian
predictive models. Similar to LIME, the explanations are
generated using an interpretable model, whose parameters
are found by minimizing the KL-divergence from the
predictive model. Thus, local interpretable explanations
are generated by projecting information from the predic-
tive distribution to a simpler interpretable probabilistic
explanation model.
• In [86], Rehman et al. used agglomerative Hierarchical
Clustering (HC) and K-Nearest Neighbor (KNN) algo-
rithms to replace the random perturbation of the LIME
algorithm. Here, authors use the HC method to group
training data together as clusters and the KNN is used to
ﬁnd closest neighbors to a test instance. Once the KNN
picks a cluster, that cluster is passed as the input data
perturbation instead of a random perturbation as in LIME
algorithm. Authors report that their approach generates
model explanations which are more stable than traditional
LIME algorithm.
• In [87], Bramhall et al. adjusted the linear relations
of LIME to consider non-linear relationships using a
quadratic approximation framework called Quadratic-
LIME (QLIME). They achieve this by considering the
linear approximations as tangentials steps within a com-
plex function. Results on a global stafﬁng company dataset
suggests that the mean square loss (MSE) of LIME’s linear
relationship at local level improves while using QLIME.
• In [88], Shi et al. introduced a replacement method to pick
superpixels of information for image data using Modiﬁed
Perturbed Sampling operation for LIME (MPS-LIME). Au-
thors converted the traditional superpixel picking operation
into a clique set construction problem by converting the
superpixels to an undirected graph. The clique operation
improves the runtime due to a considerable reduction
in the number of perturbed samples in the MPS-LIME
method. Authors compared their method with LIME
using Mean Absolute Error (MAE) and Coefﬁcient of
determination R2 and reported better results in terms of
understandability, ﬁdelity, and efﬁciency.
5) SHapley Additive exPlanations (SHAP): A game the-
oretically optimal solution using Shapley values for model
explainability was proposed by Lundberg et al. [64]. SHAP
explains predictions of an input x by computing individual
feature contributions towards that output prediction. By formu-
9
lating the data features as players in a coalition game, Shapley
values can be computed to learn to distribute the payout fairly.
In SHAP method, a data feature can be individual categories
in tabular data or superpixel groups in images similar to LIME.
SHAP then deduce the problem as a set of linear function of
functions where the explanation is a linear function of features
[89]. If we consider g as the explanation model of an ML model
f, z′ ∈{0, 1}M as the coalition vector, M the maximum
coalition size, and φj ∈R the feature attribution for feature j,
g(z′) is the sum of bias and individual feature contributions
such that:
g(z′) = φ0 +
M
X
j=1
φjz′
j
(8)
Lundberg et al. [64] further describes several variations
to the baseline SHAP method such as KernelSHAP which
reduces evaluations required for large inputs on any ML model,
LinearSHAP which estimates SHAP values from a linear
model’s weight coefﬁcients given independent input features,
Low-Order SHAP which is efﬁcient for small maximum
coalition size M, and DeepSHAP which adapts DeepLIFT
method [59] to leverage the compositional nature of deep
neural networks to improve attributions. Since KernelSHAP
is applicable to all machine learning algorithms, we describe
it in Algorithm 2. The general idea of KernelSHAP is to
carry out an additive feature attribution method by randomly
sampling coalitions by removing features from the input data
and linearizing the model inﬂuence using SHAP kernels.
SHAP was also explored widely by the research community,
was applied directly, and improved in many aspects. Use of
SHAP in the medical domain to explain clinical decision-
making and some of the recent works which have signiﬁcant
merits are summarized here:
• In [90], Antwarg et al. extended SHAP method to explain
autoencoders used to detect anomalies. Authors classify
anomalies using the autoencoder by comparing the actual
data instance with the reconstructed output. Since the
ﬁnal output is a reconstruction, authors suggests that the
explanations should be based on the reconstruction error.
SHAP values are found for top performing features and
were divided into those contributing to and offsetting
anomalies.
• In [91], Sundararajan et al. express various disadvantages
of SHAP method such as generating counterintuitive expla-
nations for cases where certain features are not important.
This ‘uniqueness’ property of attribution method is im-
proved using Baseline Shapley (BShap) method. Authors
Algorithm 2 KernelSHAP Algorithm for Local Explanations
Input: classiﬁer f, input sample x
Output: explainable coefﬁcients from the linear model
1: zk ←SampleByRemovingFeature(x)
2: zk ←hx(zk) ▷hx is a feature transformation to reshape to x
3: yk ←f(zk)
4: Wx ←SHAP (f, zk, yk)
5: LinearModel(Wx).fit()
6: Return LinearModel.coefficients()
further extend the method using Integrated Gradients to
the continuous domain.
• In [92], Aas et al. explored the dependence between
SHAP values by extending KernelSHAP method to handle
dependent features. Authors also presented a method to
cluster Shapley values corresponding to dependent features.
A thorough comparison of the KernelSHAP method was
carried out with four proposed methods to replace the
conditional distributions of KernelSHAP method using
empirical approach and either the Gaussian or the Gaussian
copula approaches.
• In [93], Lundberg et al. described an extension of SHAP
method for trees under a framework called TreeExplainer
to understand the global model structure using local
explanations. Authors described an algorithm to compute
local explanation for trees in polynomial time based on
exact Shapley values.
• In [94], VegaGarcia et al. describe a SHAP-based method
to explain the predictions of time-series signals involving
Long Short-Term Memory (LSTM) networks. Authors
used DeepSHAP algorithm to explain individual instances
in a test set based on the most important features from the
training set. However, no changes in the SHAP method
was done, and explanations were generated for each time
step of each input instances.
B. Global Explanations
AI model behavior for a suite of input data points could
provide insights on the input features, patterns, and their
output correlations thereby promoting transparency of model
behavior. Various globally explainable methods deduce the
complex deep models to linear counterparts which are easier to
interpret. Rule-based and tree-based models such as decision
trees are inherently globally interpretable. Output decision of
individual branches of a tree can be traced back to the source.
Similarly, linear models are often fully explainable given model
parameters.
Generally, globally explainable methods work on an array
of inputs to summarize the overall behavior of the blackbox
model as illustrated in Figure 10. Here, the explanation gf
describes the feature attributions of the model as a whole and
not just for individual inputs. Thus, global explainability is
important to understand the general behavior of the model f
on large distributions of input and previously unseen data.
Fig. 10. High-level illustration of a globally explainable algorithm design.
10
Fig. 11. Numerically computed images from [73] which uses the class-model
visualization method to generate images representing the target class mentioned
in the illustration.
1) Global Surrogate Models: Global surrogate models could
be used as a way to approximate the predictions of highly
non-linear AI models with an interpretable linear model or
a decision tree. Global explanations answers the ’How’ in
XAI, speciﬁcally “How generalized is my AI model?”, “How
do variations of my AI model perform?”. A general use case
of surrogate models in deep learning would be extraction of
feature-rich layer embeddings for test inputs and training a
linear classiﬁer on the embeddings. The coefﬁcients of the
linear model could give insights to how the model behaves.
In a high-level, SHAP and LIME can both be considered as
surrogate models with different methodology to understand the
local correlations than linear models. SpRAy technique we will
see in Section IV-B5 also extract local features from a group
of data to understand model behavior.
2) Class Model Visualization: Activation maximization [74]
introduced in Section IV-A1 can be also expanded as a global
method using Class Model Visualization as described by
Simonyan et al. [73]. Here, a given a trained ConvNet f and a
class of interest c, the goal is to generate image visualizations
I′ which is representative of c. This is based on the scoring
methods used to train f which maximizes the class probability
score Sc(I) for c, such that:
I
′ = arg max
I
Sc(I) −λ∥I∥2
2
(9)
Thus, the generated images provides insight to what the
blackbox model had learnt for a particular class in the
dataset. Images generated using this technique is often called
‘deep dream’ due to the colorful artefacts generated in the
visualizations corresponding to the output class under consid-
eration. Figure 11 illustrates three numerically computed class
appearance models learnt by a CNN model for goose, ostrich,
and limousine classes respectively.
3) LIME Algorithm for Global Explanations: LIME model
[65] was extended with a submodular pick algorithm (SP-
LIME) to understand the global correlations of the model under
study. This way, LIME provides a global understanding of the
model from the individual data instances by providing a non
redundant global decision boundary of the machine learning
model. Generating global importance of individual features
is done using a submodular pick algorithm (hence called SP-
LIME). Algorithm 3 describes the steps to generate a global
explanation to the blackbox model f by learning individual
feature importance of input samples x1, . . . , xn∈X.
Algorithm 3 LIME Algorithm for Global Explanations
Input: classiﬁer f, input samples x1, . . . , xn∈X
Output: explanation matrix after submodular pick
1: Define instances X and budget B
2: for x ∈X do
3:
fLIME ←LIME(f, x)
4: end for
5: Select B features from fLIME
Submodular Pick:
6: M ←GenerateMatrix(X, B)
7: Xmin ←GreedyOptimization(M)
If B is the number of explanations to inspect called Budget,
W , the explanation matrix, we start with explaining all
instances x ∈X using LIME algorithm explained in Section
IV-A4. In the domain of images, X represents individual input
images and B represent the number of superpixels selected for
the LIME algorithm. Then, we select B features from f which
represents the image better. The submodular pick algorithm
starts by generating a matrix of size X × B and applying
greedy optimization on the matrix such that it chooses minimum
number of inputs min(X) which covers the most number of
features max(F ). Here, SP-LIME works similar to a surro-
gate model by ﬁrst extracting the independent explainability
vectors using LIME operation. Hence, computational overhead,
accuracy, and complexity depends partly on the amount out
data used to understand the model globally.
4) Concept Activation Vectors (CAVs): In [58], Kim et
al. introduced Concept Activation Vectors (CAVs), a global
explainability method to interpret the internal states of a
neural network in human-friendly concept domain. Here, if
we consider the machine learning model f(.) as a vector
space Em spanned by basis vector em, we see that human
understanding can be modelled as vector space Eh and implicit
vectors eh which correspond to human-understandable concepts
C. Hence, the explanation function of the model in a global
sense, g, becomes g : Em →Eh.
Now, human understandable concepts are generated from
either input features of training data or user-provided data
to simplify the lower-level features of the input domain. For
example, a zebra can be deduced to positive concepts PC
such as stripes as illustrated in Figure 12. A negative set of
concepts, N, can be gathered, for example a set of random
photos, to contrast the concepts for zebra. Layer activations for
layer j of f, zj is calculated for both positive and negative
concepts. The set of activations are trained using a binary
classiﬁer to distinguish between: {fj(x) : x ∈PC} and
{fj(x) : x ∈N}.
Authors proposed a new method, Testing with CAVs (TCAV),
which uses directional derivatives similar to gradient based
methods to evaluate the sensitivity of class predictions of f
to the changes in given inputs towards the direction of the
concept C for a speciﬁc layer j. If h(j, k) is the logit of
layer j for class k for a particular input, conceptual sensitivity
of a class k to C can be computed as directional derivative
SC,k,j(x) for a concept vector vj
C ∈Rm:
11
Fig. 12. Figure illustrates the TCAV process [58] where (a) describe random concepts and examples, (b) labelled examples from training data, (c) trained
neural network, (d) linear model segregating the activations extracted from speciﬁc layers in the neural network for the concepts and random examples, and (e)
ﬁnding conceptual sensitivity using directional derivatives.
SC,k,j(x)
=
lim
ϵ→0
hj,k(zj(x) + ϵvj
C) −hj,k(zj(x))
ϵ
=
∇hj,k(zj(x)) · vj
C,
(10)
A TCAV score can be calculated to ﬁnd the inﬂuence of
inputs towards C. If Xk denotes all inputs with label k, TCAV
score is given by:
T CAVC,k,j = |{x ∈Xk : SC,k,j(x) > 0}|
|Xk|
(11)
TCAV unfortunately could generate meaningless CAVs if
the input concepts are not picked properly. For example,
input concepts generated randomly would inherently generate
bad linear models for binary classiﬁcation and thus TCAV
score wouldn’t be a good identiﬁer for global explainability.
Also, concepts with high correlations or shared objects in the
data, such as cars and roads, could decrease the efﬁciency of
TCAV method. Human bias in picking the concepts also is a
considerable disadvantage of using concepts for explainability.
The CAV method was further improved in numerous research
papers which involved the primary author of CAV [58]:
• In [52], Ghorbani et al. described a method called
Automatic Concept-based Explanations (ACE) to globally
explain a trained classiﬁer without human supervision
unlike TCAV method. Here, authors carry out a multi-
resolution segmentation of instance to be explained. This
generates multiple resolution segments from the same
class. All segments are reshaped to similar input sizes
and activations of each segment is found with respect
to a speciﬁc chosen bottleneck layer. Clustering the
activations and removing outliers reveals similarities
within activations.
TCAV scores of individual concepts provide an importance
score of the same for particular classiﬁcation. Authors
carried out human subject experiments to evaluate their
method and found inspiring results. One research question
that arise is the importance of clusters in decision-making.
Authors showed that, by stitching the clustered concepts
together as an image, a trained InceptionV3 deep neural
network was capable of classifying the stitched image as
the correct class category. This tends to show that the
extracted concepts are suitable for decision-making within
the deep learning model.
• Work done by Goyal et al. [51] improved TCAV method by
proposing a Causal Concept Effect (CaCE) model which
looks at the causal effect of presence or absence of high-
level concepts towards deep learning model’s prediction.
Methods such as TCAVs can suffer from confounding of
concepts which could happen if the training data instances
have multiple classes in them, even with low correlation
between the classes. Also, biases in dataset could inﬂuence
concepts, as well as colors in the input data.
CaCE can be computed exactly if we can change concepts
of interest by intervening the counterfactual data genera-
tion. Authors call this Ground truth CaCE (GT-CaCE) and
also elaborate a way to estimate CaCE using Variational
Auto Encoders (VAEs) called VAE-CaCE. Experimental
results on four datasets suggest improved clustering and
performance of the CaCE method even when there are
biases or correlations in the dataset.
• In [95], Yeh et al. introduced ConceptSHAP to deﬁne an
importance or “completeness” score for each discovered
concept. Similar to ACE method mentioned earlier, one of
the aims of ConceptSHAP is to have concepts consistently
clustered to certain coherent spatial regions. However,
ConceptSHAP ﬁnds the importance of each individual
concepts with high completeness score from a set of m
concept vectors Cs = {c1, c2, . . . , cm} by utilizing
Shapley values for importance attribution.
5) Spectral Relevance Analysis (SpRAy): SpRAy technique
by Lapuschkin et al. [49] builds on top of the local instance
based LRP explanations. In speciﬁc, authors described a
spectral clustering algorithm on local explanations provided
by LRP to understand the decision-making process of the
model globally. By analyzing the spatial structure of frequently
occurring attributions in LRP instances, SpRAy identiﬁes
12
normal and abnormal behavior of machine learning models.
Algorithm 4 explains the SpRAy technique in detail. We start
by ﬁnding local relevance map explanations to every individual
data instances x ∈X using LRP method. The relevance
maps are downsized to uniform shape and size to improve
computation overhead and generate tractable solutions. Spectral
cluster analysis (SC) is carried out on the LRP attribution
relevance maps to cluster the local explanations in a high-
dimensional space. An eigenmap analysis is carried out to ﬁnd
relevant clusters by ﬁnding the eigengap (difference in two
eigenvalues) of successive clusters. After completion, important
clusters are returned to users. The clusters can be optionally
visualized using t-Stochastic Neighbor Embedding (t-SNE)
visualizations.
Algorithm 4 SpRAy Analysis Algorithm on LRP Attributions
Input: classiﬁer f, input samples x(1), . . . , x(n)
Output: clustered input samples
1: for x(i) ∈X do
2:
fSpRAy ←LRP (f, x(i))
3: end for
4: Reshape fSpRAy
5: clusters ←SC(fSpRAy)
6: clusters∗←EigenMapAnalysis(clusters)
7: Return clusters∗
8: Optional: Visualize t-SNE(clusters∗)
6) Global Attribution Mapping: When features have well
deﬁned semantics, we can treat attributions as weighted
conjoined rankings [53] with each feature as a rank vector σ.
After ﬁnding local attributions, global attribution mapping ﬁnds
a pair-wise rank distance matrix and cluster the attribution by
minimizing cost function of cluster distances. This way, global
attribution mapping can identify differences in explanations
among subpopulations within the clusters which can trace the
explanations to individual samples with tunable subpopulation
granularity.
7) Neural Additive Models (NAMs): In [50], Agarwal et
al. introduced a novel method to train multiple deep neural
networks in an additive fashion such that each neural network
attend to a single input feature. Built as an extension to
generalized additive models (GAM), NAM instead use deep
learning based neural networks to learn non-linear patterns and
feature jumping which traditional tree-based GAMs cannot
learn. NAMs improved accurate GAMs introduced in [70] and
are scalable during training to several GPUs.
Consider a general GAM of the form:
g(E[y]) = β +f1 (x1)+f2 (x2)+· · ·+fK (xK) (12)
where fi is a univariate shape function with E[fi] = 0,
x ∈x1, x2, . . . , xK is the input with K features, y is the
target variable, and g(.) is a link function. NAMs can be
generalized by parameterizing the functions fi with neural
networks with several hidden layers and neurons in each layer.
We can see individual neural networks applied to each features
xi. The outputs of each fi is combined together using a
summing operation before applying an activation. A high-level
Fig. 13.
A high-level diagram of the interpretable NAM architecture for
binary classiﬁcation is illustrated [50]. Functions fi is used to learn from
corresponding. individual features in xi.
diagram of NAM is provided in 13 taken from the source
paper.
Authors proposed exp-centered (ExU) hidden units to
overcome the failure of ReLU activated neural networks with
standard initializations to ﬁt jagged functions. NAMs should
be able to learn jagged functions due to sharp changes in
features in real-world datasets often encountered in GAMs.
For ExU hidden units, the unit function can be calculated
as h(x) = f(ew ∗(x −b)), where x, w, and b are
the inputs, weights, and biases parameters. Authors used a
weight initialization of training from a normal distribution
N (x, 0.5) with x ∈[3, 4]. This globally explainable model
provides average score of shape functions of individual neural
networks to provide interpretable contributions of each features
as positive and negative values. Negative values reduce the
class probability while positive values improve the same.
NAM is an interesting architecture because we can generate
exact explanations of each feature space with respect of an
output prediction. Newer research could open up venues to
expand the ideas to CNNs and for other domains such as text.
V. DIFFERENCES IN THE METHODOLOGY
Based on the core algorithmic approach followed in the
XAI method, we can categorize XAI methods as the ones
which focus on the changes or modiﬁcations input data and the
ones which focus on the model architecture and parameters.
These fundamental changes are categorized in our survey as
perturbation-based and backpropagation-based respectively.
A. Perturbation-Based
Explanations generated by iteratively probing a trained
machine learning model with different variations of the inputs
generally fall under perturbation based XAI techniques. These
13
perturbations can be on a feature level by replacing certain
features by zero or random counterfactual instances, picking
one or group of pixels (superpixels) for explanation, blurring,
shifting, or masking operations, etc. As we discussed in
the prior sections, LIME algorithm works on superpixels
of information or features as illustrated in Figure 9. By
iteratively providing input patches, visual explanations of
individual superpixels are generated. SHAP has a similar
method of probing feature correlations by removing features in
a game theoretic framework. Intuitively, we see that methods
trying to understand neuronal activities and the impact of
individual features to a corresponding class output by any
input perturbations mentioned above can be categorized as
a group of method, which we here call perturbation-based
XAI method. The methods described in this section are further
summarized in Table III.
1) DeConvolution nets for Convolution Visualizations:
Zeiler et al. [71] visualized the neural activations of individual
layers of a deep convolutional network by occluding different
segments of the input image and generating visualizations
using a deconvolution network (DeConvNet). DeConvNets are
CNNs designed with ﬁlters and unpooling operations to render
opposite results than a traditional CNN. Hence, instead of
reducing the feature dimensions, a DeConvNet, as illustrated
in Figure 14, is used to create an activation map which maps
back to the input pixel space thereby creating a visualization
of the neural (feature) activity. The individual activation maps
could help understand what and how the internal layers of the
deep model of interest is learning - allowing for a granular
study of DNNs.
Fig. 14. Deconvolution operation is applied using a DeConv layer attached to
the end of a ConvNet. Here the DeConvNet generates an approximate version
of the convolution features thereby providing visual explanations. Figure from
[71].
2) Prediction Difference Analysis: A conditional sampling
based multi-variate approached was used by Zintgraf et al. [62]
to generate more targeted explanations on image classiﬁcation
CNNs. By assigning a relevance value to each input features
with respect to the predicted class c, the authors summarize
the positive and negative correlation of individual data features
to a particular model decision. Given an input feature x, its
feature relevance can be estimated by studying the changes in
model output prediction for the inputs with different hidden
features. Hence, if x\i denotes the set of all input features
except x, the task is to ﬁnd the difference between p(c|x)
and p(c|x\i).
3) Randomized Input Sampling for Explanation (RISE):
The RISE method introduced by Petsiuk et al. [57] perturb
an input image by multiplying it with randomized masks. The
masked images are given as inputs and the saliency maps
corresponding to individual images are captured. Weighted
average of the masks according to the conﬁdent scores is used
to ﬁnd the ﬁnal saliency map with a positive valued heatmap
for individual predictions. Importance maps of the blackbox
prediction is estimated using Monte Carlo sampling. A high-
level architecture is illustrated in Figure 15.
4) Randomization and Feature Testing: The Interpretability
Randomization Test (IRT) and the One-Shot Feature Test
(OSFT) introduced by Burns et al. [55] focuses on discovering
important features by replacing the features with uninformative
counterfactuals. Modeling the feature replacement with a hy-
pothesis testing framework, the authors illustrate an interesting
way to examine contextual importance. Unfortunately, for deep
learning algorithms, removing one or more features from
the input isn’t possible due to strict input dimensions for
a pre-trained deep model. Zero-ing out values or ﬁlling in
counterfactual values might lead to unsatisfactory performance
due to correlation between features.
Fig. 15. The input image given to a deep learning model is perturbed using
various randomized masks. A conﬁdence score is found out for individual
masked inputs. A ﬁnal saliency map is generated using a weighting function
[57].
B. BackPropagation- or Gradient-Based
Perturbation-based methods, as we saw in the previous
section, focuses on variations in the input feature space to
explain individual feature attributions of f towards the output
class c. Gradient-based explainability methods, in contrast,
utilize the backward pass of information ﬂow in a neural
network to understand neuronal inﬂuence and relevance of the
14
TABLE III
SUMMARY OF PUBLISHED RESEARCH IN PERTURBATION-BASED METHODS
Method Name
Interpretation Perspective
Applied Network
Comments and Discussions
DeConv Nets by Zeiler et
al. [71]
Neural activation of individual layers by occlud-
ing input instance and visualizing using DeConv
Nets
AlexNet
Authors trained an AlexNet model on Ima-
geNet dataset and layer-wise ﬁlter visualiza-
tions were carried out, studied feature gener-
alization, and brought important insights in
dataset bias and issues with small training
samples.
LIME by Ribeiro et al.
[65]
Iterative perturbation to input data instance by
ﬁnding superpixels
-
Authors generated locally faithful explana-
tions using input perturbations around a point
of interest. A human/user study was carried
out to assess the impact of using LIME as
an explanation and found that explanations
can improve a untrustworthy classiﬁer.
SHAP by Lundberg et al.
[64]
Probing feature correlations by removing features
in a game theoretic framework
-
SHAP produced consistently better results
than LIME. A user study indicated that
SHAP explanations are consistent with hu-
man explanations. However, as we will see
in the evaluation section, some recent studies
argue that SHAP values, albeit good in
generating explanations, does not improve
ﬁnal decision making.
Prediction
Difference
Analysis by Zintgraf et al.
[62]
By studying f removing individual features from
x, ﬁnd the positive and negative correlation of
individual features towards the output.
AlexNet,
GoogLeNet,
VGG
One of the ﬁrst works to look at positive and
negative correlation of individual features
towards the output by ﬁnding a relevance
value to each input feature. Trained various
models on ImageNet dataset to understand
the support for the output classes from
various layers of deep nets.
Randomized Input Sam-
pling for Explanation by
Petsiuk et al. [57]
Study saliency maps by randomized masking of
inputs
ResNet50,
VGG16
-
Randomization and Fea-
ture Testing by Burns et
al. [55]
Counterfactual replacements of features to study
feature importance
Inception
V3,
BERT
-
input x towards the output. As we will see in the following
subsections, majority of gradient-based methods focuses on
either visualization of activations of individual neurons with
high inﬂuence or overall feature attributions reshaped to the
input dimensions. A natural advantage of gradient-based XAI
methods are the generation of human understandable visual
explanations.
1) Saliency Maps: As mentioned in sub-section IV-A2,
Simonyan et al. [73] introduced a gradient based method to
generate saliency maps for convolutional nets. DeConvNet work
by Zeiler et al. [71] mentioned previously as a perturbation
method uses backpropagation for activation visualizations.
DeConvNet work was impressive due to relative importance
given to gradient value during backprop. With Rectiﬁed Linear
Unit (ReLU) activation, a backprop on traditional CNNs
would result in zero values for negative gradients. However,
in DeConvNets, the gradient value is not clipped at zero. This
allowed for accurate visualizations. Guided backpropagation
methods [67], [96] are also another class of gradient based
explanation which improved upon [73].
2) Gradient class activation mapping (CAM): Most saliency
methods use global average pooling layer for all pooling
operations instead of maxpooling. Zhou et al. [66] modiﬁed
global average pooling function with class activation mapping
(CAM) to localize class-speciﬁc image regions on an input
image with a single forward-pass. Grad-CAM [63] and Grad-
CAM++ [56] improved the CAM operation for deeper CNNs
and better visualizations.
GradCAM is a class-discriminative attribution technique for
localizing the neuronal activity of a CNN network. It allows
class-speciﬁc query of an input image and also counterfactual
explanations which highlights regions in the image which
negatively contribute to a particular model output. GradCAM is
successfully applied to explain classiﬁers in image classiﬁcation,
image segmentation, visual question answering (VQA), etc.
Figure 16 illustrates a segmentation method utilizing GradCAM
to improve the segmentation algorithm. Here, we see another
example of using XAI explanations to improve performance
of deep neural networks.
3) Salient Relevance (SR) Maps: Li et al. [54] proposed
Salient Relevance (SR) map which is a context aware salience
map based on the LRP of input image. Hence, the ﬁrst step is
to ﬁnd LRP relevance map for input image of interest with the
same input dimensions. A context aware salience relevance map
algorithm takes the LRP relevance maps and ﬁnds a saliency
value for individual pixels. Here, a pixel is salient if a group
of neighboring pixels are distinct and different from other
pixel patches in the same and multiple scales. This is done to
differentiate between background and foreground layers of the
image.
To aid visualization, a canny-edge based detector is superim-
posed with the SR map to provide context to the explanation.
We place SR in gradient based methods due to the use of
LRP. Other relevance propagation methods based on Taylor
decomposition [61] are also explored in literature, which are
15
Fig. 16. Illustration from [63] showing segmentation results by using Grad-
CAM output as a seed.
slightly different in the methodology but have the same global
idea.
Algorithm 5 describes the SR map generation in detail.
Similar to SpRAy technique, we start with the LRP of the
input instance. In contrast, we only ﬁnd LRP attribution
relevance score for a single input of interest x. Then a context
aware saliency relevance (SR) map is generated by ﬁnding a
dissimilarity measure based on the euclidean distance in color
space and position. Multi-scale saliency at scales r, r
2, r
4 are
found out and the immediate context of image x based on an
attention function is added to generate the SR map.
Algorithm 5 Salient Relevance (SR) Algorithm
Input: classiﬁer f, input sample x, scale factor r
Output: relevance map
1: fLRP ←LRP (x)
2: GenerateSRMap(x, fLRP )
3: S ←MultiScaleSaliency(r, r
2, r
4)
4: SRMap ←AttentionFunction(x, S)
5: Return SRMap
4) Attribution Maps: In [60], Ancona et al. shows that the
gradient method, where the gradient of output corresponding
to input is multiplied by the input, is useful in generating
an interpretable explanation to model outcomes. However, in
[59], authors proposed Integrated Gradients (IG) and argue
that most gradient based lack in certain ‘axioms’ which
are desirable characteristics of any gradient based technique.
Authors argue that methods such as DeepLift [98], Layer-wise
relevance propagation (LRP) [69], Deconvolutional networks
(DeConvNets) [71], and Guided back-propagation [67] have
speciﬁc back-propagation logic that violates some axioms.
For each input data instance x, if we consider a baseline
instance x
′ ∈Rn, the attributions of x on model f can be
summarized by computing the integral of gradients at all points
of a straight-line path from baseline x
′ to x. This method is
called the Integrated Gradients such that:
IGj(x, x′) := (xj −x′
j) ×
Z 1
α=0
∂F (x′+α×(x−x′))
∂xj
dα (13)
where j describes the dimension along which the gradient
is calculated. During calculation in computers, the integral
in equation 13 is efﬁciently approximated using summation
instead. In many cases, baseline instance x
′
i is chosen as a
zero matrix or vector. For example, for image domain, the
baseline image is chosen as a black image by default. For text
classiﬁcation, the baseline is a zero valued vector. However,
choosing baselines arbitrarily could cause issues downstream.
For example, a black baseline image could cause the attribution
method to diminish the importance of black pixels in the source
image.
Attribution prior [99] concept tries to regularize the feature
attributions during model training to encode domain knowledge.
A new method, Expected Gradients (EG) was also introduced
in the paper as a substitute feature attribution method instead
of Integrated Gradients. Together, the attribution prior and
EG methods encodes prior knowledge from the domain to
aid training process leading to better model interpretability.
Equation 14 shows how authors remove the inﬂuence of
baseline images from integrated gradients by still following
all the axioms of Integrated Gradient method. Here, D is the
distribution of underlying data domain.
EG(x) :=
Z
x′
 xj −x′
j
 Z 1
α=0
δf(x′+α×(x−x′))
δxj
δα

.pD
 x′
δx′
(14)
Since an integration over the whole training distribution is
intractable, authors proposed to reformulate the integral as
expectations such that:
EG(x) :=
E
x′∼D,α∼U(0,1)
 xj −x′
j
 δf(x′+α×(x−x′))
δxj

(15)
5) Desiderata of Gradient-based Methods: Gradient-based
methods, as we saw, mainly use saliency maps, class activation
maps, or other gradient maps for visualization of important
features. Recent research have found numerous limitations
in gradient-based methods. To improve gradient-based XAI
techniques, Sundararajan et al. [59] describes four desirable
qualities (axioms) that a gradient based method needs to follow:
1) Sensitivity: If for every input and baseline that differ in
one feature but have different predictions then the differing
feature should be given a non-zero attribution [59]. For
simple functions such as f(x) = 1 −ReLU(1 −x),
the function value saturates for x values greater than or
equal to one. Hence, if we take simple gradients as an
attribution method, sensitivity won’t hold.
2) Implementation invariance: Two networks are function-
ally equivalent if their outputs are equal for all inputs,
despite having very different implementations. Attribution
methods should satisfy Implementation Invariance, i.e.,
the attributions are always identical for two functionally
equivalent networks [59]. Methods such as DeepLift and
LRP break implementation invariance because they use
discrete gradients, and chain rule doesn’t old for discrete
gradients in general. Generally, if the model fails to
provide implementation invariance, the attributions are
16
TABLE IV
SUMMARY OF PUBLISHED RESEARCH IN GRADIENT-BASED METHODS
Method Name
Interpretation Perspective
Applied Network
Comments and Discussions
Saliency Maps [67], [71],
[73], [96]
Visualizing gradients, neural activation of indi-
vidual layers using DeConv nets, guided back-
propagation, etc. as images.
AlexNet,
GoogLeNet,
ResNet18,
VGG16
A group of techniques which kicked-off
gradient-based XAI research. As we will
see in the evaluation section, these methods
have serious disadvantages which needs to
be improved.
Grad-CAM by Selvaraju et
al. [63]
Localize neuronal activity ﬂowing to last convo-
lutional layer of a CNN to allow class-speciﬁc
query with counterfactual explanations describing
negative inﬂuence of input features as well.
AlexNet, VGG16,
ResNet,
and
more.
-
Salient Relevance by Li et
al. [54]
Takes the LRP relevance maps and ﬁnds a
saliency value for individual pixels.
-
-
Axiomatic
Attribution
Maps by Sundararajan et
al. [59]
Feature importance based on distance from a
baseline instance
GoogLeNet,
LSTM
based
NMT, and more.
Introduced axioms or desirable qualities
for gradient-based methods. Improved the
saliency maps and gradient times input maps.
PatternNet and PatternAt-
tribution by Kindermans et
al. [97]
LRP-based method with back-projection of esti-
mated signals to input space. Cleaner attributions
based using root point selection algorithm.
VGG16
-
potentially sensitive to unimportant features and aspects
of the model deﬁnition.
3) Completeness:
Attributions should add up to the
difference between output of model function f for
the input image x and another baseline image x
′.
Σn
i=1Gradientsi(x) = f(x) −f(x
′).
4) Linearity: For a linearly composed neural network model
f3 which is a linear combination of two neural network
models f1 and f2 such that f3 = a × f1 + b × f2, then
the attributions of the f3 is expected to be a weighted
sum of attributions for f1 and f2 with weights a and b
respectively.
Despite human understandable explanations, gradient-based
explanation maps have practical disadvantages and raises
various concerns in mission-critical applications. We explain
some of these concerns in later sections.
VI. MODEL USAGE OR IMPLEMENTATION LEVEL
A. Model Intrinsic
On a usage or implementation level, model intrinsic ex-
plainable methods have interpretable elements baked into
them. These models are inherently interpretable either by
following strict axioms, rule-based ﬁnal decisions, granular
explanations for decisions, etc. By deﬁnition, intrinsic methods
of explanations are inherently model-speciﬁc. This means that
Fig. 17. High-level illustration of model intrinsic explainability algorithms.
Here, the explainability is baked into f itself such that f is naturally
explainable.
the explainer depends on the model architecture and cannot be
re-used for other classiﬁer architectures without designing the
explanation algorithm speciﬁcally for the new architecture as
illustrated in Figure 17.
1) Trees and Rule-based Models: Shallow rule-based mod-
els such as decision trees and decision lists are inherently
interpretable. Many explainable algorithms including LIME
and SHAP uses linear or tree based models for their globally
explainable extensions of the core algorithms. Letham et al. [68]
introduced Bayesian Rule Lists (BRL) which is a generative
model that yields a posterior distribution over possible decision
lists to improve interpretability while keeping accuracy.
The rule list has an if, else, and elseif rules generalized as
the IF-THEN rule antecedent and predictions. As we add more
IF-THEN rules to the decision list, the model becomes more
accurate and interpretable. However, support for explanations
deteriorate with large number of conditions. One way to
simplify the problem is to ﬁnd the frequent rule patterns
and learn a decision list from the distribution using Bayesian
techniques.
By picking a sample rule list from the priori distribution
and iteratively adding and editing the rules, BRL tries to
optimize the rules such that the new rule distribution follows
the posteriori distribution. Once optimized, new rules can
be sampled from the posteriori distribution. Recent research
have improved the scalability of BRL [100] by improving
the theoretical bounds, computational reuse, and highly tuned
language libraries.
2) Generalized additive models (GAMs): Caruana et al. [70]
introduced Generalized additive models (GAMs) with pairwise
interactions (GA2Ms) to improve the accuracy while maintain-
ing interpretability of GAMs. However, for certain models,
GAMs require often millions of decision trees to provide
accurate results using the additive algorithms. Also, depending
on the model architecture, over-regularization reduces accuracy
of GAM models which are ﬁt using splines. Numerous methods
have improved GAMs. Perhaps the most important work is
the recent Neural Additive Models we discussed in subsection
IV-B7.
17
3) Sparse LDA and Discriminant Analysis: A Bayesian
non-parametric model, Graph-Sparse LDA, was introduced in
[101] to ﬁnd interpretable, predictive topic summaries to textual
categories on datasets with hierarchical labeling. Grosenick et al.
[75] introduced a method called Sparse Penalized Discriminant
Analysis (SPDA) to improve the spatio-temporal interpretability
and classiﬁcation accuracy of learning algorithms on Functional
Magnetic Resonance Imaging (FMRI) data.
As we see in published research, there are several restrictions
to use model intrinsic architectures as it requires careful algo-
rithm development and ﬁne-tuning to the problem setting. The
difﬁculty in using concepts from model intrinsic architectures
and apply them in existing high-accuracy models to improve
interpretability is a disadvantage of model-intrinsic methods.
However, as long as a reasonable performance limit is set,
model intrinsic architectures for XAI could help accelerate
inherently interpretable models for future AI research.
B. Post-Hoc
Explaining pre-trained classiﬁer decisions require algorithms
to look at AI models as black or white boxes. A black box
means the XAI algorithm doesn’t know the internal operations
and model architectures. In white box XAI, algorithms have
access to the model architecture and layer structures. Post-
hoc explanation methodology is extremely useful as existing
accurate models can beneﬁt from added interpretability. Most
post-hoc XAI algorithms are hence model-agnostic such that
the XAI algorithm will work on any network architectures as
illustrated in Figure 18. This is one of the main advantages
of post-hoc explainable algorithms. For example, an already
trained well established neural network decision can be
explained without sacriﬁcing the accuracy of the trained model.
Deconvolution network [71] could be used to generate post-
hoc explanations of layer-wise activations. Saliency maps [73]
and most attribution based methods [59] are applied considering
the network as a white or black box. LRP technique [69]
discussed above is done after training the model completely.
Shapley sampling methods [64] are also post-hoc and model
agnostic. Activation maximization technique [74] is applicable
to any network in which we can ﬁnd gradients values to
optimize activations.
Fig. 18. High-level illustration of post-hoc model explainability algorithms.
Here, the explainability algorithm is applied on f such that f is made
explainable externally.
VII. EVALUATION METHODOLOGIES, ISSUES, AND FUTURE
DIRECTIONS
So far, we focused on XAI algorithms and methods catego-
rized under scope, methodology, and usage. The seminar works
discussed in the survey is tabulated in Table V. A fundamental
challenge in XAI research is to evaluate the several proposed
algorithms on real-world settings. Our survey on evaluation
techniques suggested that the ﬁeld is still immature with
primary focus on a human-in-the-loop evaluations. Quantitative
general evaluation schemes are yet to be explored. However, we
summarize here some of the methods which improve human
understandability of explainability method results based on
[38], [102], [103]. In general, each explanation should follow
the below constraints to be usable by humans in a real-world
setting:
1) Identity or Invariance: Identical data instances must
produce identical attributions or explanations.
2) Stability: Data instances belonging to the same class c
must generate comparable explanations g.
3) Consistency: Data instances with change in all but one
feature must generate explanations which magniﬁes the
change.
4) Separability: Data instances from different populations
must have dissimilar explanations.
5) Similarity: Data instances, regardless of class differences,
closer to each other, should generate similar explanations.
6) Implementation Constraints: Time and compute require-
ment of the explainable algorithm should be minimal.
7) Bias Detection: Inherent bias in data instances should be
detectable from the testing set. Similarity and separability
measures help achieve this.
A. Evaluation Schemes
Several evaluation schemes have been suggested by the
research community in the recent years. We present here some
of the evaluation techniques that are actively gaining traction
from the research community:
• System Causability Scale (SCS): As the explainability
methods are applied to human-facing AI systems which
does automated analysis of data, evaluation of human-
AI interfaces as a whole is also important. A System
Causability Scale (SCS) was introduced in [104] to
understand the requirements for explanations of a user-
facing human-AI machine-interface, which are often
domain speciﬁc. Authors described a medical scenario
where the SCS tool was applied to Framingham Risk
Tool (FRT) to understand the inﬂuence and importance
of speciﬁc characteristics of the human-AI interface.
• Benchmarking Attribution Methods (BAM): In a preprint
publication, [105] introduced a framework called Bench-
marking Attribution Methods (BAM) to evaluate the
correctness of feature attributions and their relative impor-
tance. A BAM dataset and several models were introduced.
Here, the BAM dataset is generated by copying pixel
groups, called Common Features (CF), representing object
categories from MSCOCO dataset [106] and pasting them
to MiniPlaces dataset [107]. The hypothesis is that, if
18
TABLE V
SUMMARY OF PUBLISHED RESEARCH IN EXPLAINABILITY AND INTERPRETABILITY OF DEEP LEARNING ALGORITHMS. * INDICATES THAT A PREPRINT
VERSION WAS PUBLISHED AN YEAR PRIOR TO THE CONFERENCE OR JOURNAL VERSION.
Method Name
Publication
Year
Scope
Methodology
Usage
Agnostic or
Speciﬁc
Domain
Bayesian averaging over decision trees
Schetinin et al. [76]
2007
GL
OT
IN
MS
TAB
SPDA
Grosenick et al. [75]
2008
GL
OT
IN
MS
TXT
Activation Maximization
Erhan et al. [74]
2010
LO
BP
PH
MA
IMG
Gradient-based Saliency Maps
Simonyan et al. [73]
2013
LO
BP
PH
MA
IMG
Bayesian Case Model (BCM)
Kim et al. [72]
2014
GL
OT
IN
MS
Any
DeConvolutional Nets
Zeiler et al. [71]
2013
LO
BP
PH
MA
IMG
GAM
Caruana et al. [70]
2015
GL
OT
IN
MS
TAB
LRP
Back et al. [69]
2015
Both
BP
PH
MA
IMG
Guided Backprop
Springenberg et al. [67]
2015
LO
BP
PH
MA
IMG
Bayes Rule Lists
Letham et al. [68]
2015
GL
OT
IN
MS
TAB
CAM
Zhou et al. [66]
2016
LO
BP
PH
MA
IMG
LIME
Ribeiro et al. [65]
2016
Both
PER
PH
MA
Any
Shapley Sampling
Lundberg et al. [64]
2017
Both
PER
PH
MA
Any
Grad-CAM
Selvaraju et al. [63]
2017*
LO
BP
PH
MA
IMG
Prediction Difference Analysis (PDA)
Zintgraf et al. [62]
2017
LO
PER
PH
MA
IMG
Deep Taylor Expansion
Montavon et al. [61]
2017
LO
OT
PH
MA
IMG
Deep Attribution Maps
Ancona et al. [60]
2017
LO
BP
PH
MA
IMG
Axiomatic Attributions
Sundararajan et al. [59]
2017
LO
BP
PH
MA
IMG
PatternNet and PatternAttribution
Kindermans et al. [97]
2017
LO
BP
PH
MA
IMG
Concept Activation Vectors
Kim et al. [58]
2018
GL
OT
PH
MA
IMG
RISE
Petsiuk et al. [57]
2018
LO
PER
PH
MA
IMG
Grad-CAM++
Chattopadhay et al. [56]
2018
LO
BP
PH
MA
IMG
Randomization and Feature Testing
Burns et al. [55]
2019
LO
PER
PH
MA
IMG
Salient Relevance (SR) map
Li et al. [54]
2019
LO
BP
PH
MA
IMG
Spectral Relevance Analysis
Lapuschkin et al. [49]
2019
GL
BP
PH
MA
IMG
Global Attribution Mapping
Ibrahim et al. [53]
2019
GL
PER
PH
MA
IMG
Automatic Concept-based Explanations
Ghorbani et al. [52]
2019
GL
OT
PH
MA
IMG
CaCE
Goyal et al. [51]
2019
GL
OT
PH
MA
IMG
Neural Additive Models
Agarwal et al. [50]
2020
GL
OT
IN
MS
IMG
Global: GL, Local: LO, Others: OT, BackProp: BP, Perturbation: PER, Model-speciﬁc: MS, Model-agnostic: MA, Tabular:
TAB, Image: IMG, Test: TXT, Any: Image, Text, or Tabular.
we have the same pixel group of information in the
same spatial location of all of X, then the model should
ignore it as a feature of relative importance. Hence,
attribution methods focusing on pasted objects are simply
not doing a good job at enhancing feature attributions of
important features. Authors provided model contrast score
(MCS) to compare relative feature importance between
difference models, input dependence rate (IDR) to learn
the dependence of CF on a single instance, and input
independence rate (IIR) as a percentage score of images
whose average feature attributions gr ∈R for region r
with and without CF is less than a set threshold.
• Faithfulness and Monotonicity: In [108], authors described
a metric, named Faithfullness, to evaluate the correlation
between importance scores of features to the performance
effect of each feature towards a correct prediction. By
incrementally removing important features and predicting
on the edited data instance, we measures the effect
of feature importance and later compare it against the
interpreter’s own prediction of relevance. In [109], authors
introduce monotonic attribute functions and thus the
Monotonicity metric which measures the importance or
effect of individual data features on the performance of
the model by incrementally adding each feature in the
increasing order of importance to ﬁnd model performance.
The model performance is expected to increase as more
important features are added.
• Human-grounded Evaluation Benchmark: In [110], Mosh-
seni et al. introduced a human-grounded evaluation
benchmark to evaluate local explanations generated by
an XAI algorithm. Authors created a subset of ImageNet
dataset [111] and asked human annotators to manually
annotate the images for the particular classes. A weighted
explanation map was generated which summarized an
average human representation of explanations. By com-
paring the explanations generated by locally explainable
algorithms, authors presented a method to understand
the precision of XAI explanations compared to human
generated explanations. One fundamental ﬂaw of this
method could be added human bias in the explanations.
However, human labels of individual data points from a
large population could nullify the effect of inherent bias.
B. Software Packages
OpenSource packages have greatly improved reproducible
research and has been a real boon to recent research in deep
learning and XAI alike. We mention here some XAI software
packages available in GitHub.
• Interpret by InterpretML can be used to explain black-
box models and currently supports explainable boosting,
decision trees, decision rule list, linearlogistic regression,
SHAP kernel explainer, SHAP tree explainer, LIME, mor-
ris sensitivity analysis, and partial dependence. Available
at https://github.com/interpretml/interpret.
19
Fig. 19. We evaluate different gradient-based and perturbation-based techniques in this ﬁgure. LIME and SHAP uses segmented superpixels to understand
feature importance, while gradient based saliency maps, Integrated Gradients, LRP, DeepLIFT, and Grad-CAM use backpropagation based feature importance
in a pixel level. Original prediction accuracies of a pre-trained InceptionV3 model on the images in each rows provided are as follows: (a) ‘koala’, 94.5%,
(b) ‘sandbar’, 38.0%, (c) ‘arabian camel’, 17.4%, and (d) ‘leaf beetle’, 95.5%. Each column represents the attribution map generated by individual XAI
methods. Scales to assess Grad-CAM and SHAP values are provided in the lower right section of the image. Gradient visualizations of this ﬁgure are created
using DeepExplain package while visualizations for Grad-CAM, LIME, and SHAP are created by their own individual implementations. The experiments were
carried out in Jetstream cloud [112]. This image is better viewed in color.
• IML package [113] is maintained by Christoph Molnar,
author of [89]. The package covers feature importance, par-
tial dependence plots, individual conditional expectation
plots, accumulated local effects, tree surrogates, LIME,
and SHAP. Available at https://github.com/christophM/iml.
• DeepExplain package is maintained by Marco Ancona,
author of [60]. The package supports various gradient-
based techniques such as saliency maps, gradientinput,
integrated gradients, DeepLIFT, LRP, etc. and perturbation-
based methods such as occlusion, SHAP, etc. Available
at https://github.com/marcoancona/DeepExplain.
• DrWhy by ModelOriented is a package with several
model agnostic and model speciﬁc XAI techniques in-
cluding feature importance, ceteris paribus, partial de-
pendency plots, conditional dependency, etc. Available at
https://github.com/ModelOriented/DrWhy
C. A Case-study on Understanding Explanation Maps
In Figure 19, we illustrate the explanation maps generated
using various gradient- and perturbation-based XAI techniques
for four images from ImageNet [111] dataset to explain the
decisions an InceptionV3 model pre-trained on ImageNet. Here,
each row starts with an original image from ImageNet followed
by explanation map generated by gradient algorithms such as 1)
saliency maps, 2) gradient times input, 3) integrated gradients,
4) LRP, 5) DeepLIFT, and 6) GradCAM, and perturbation-based
techniques such as 1) LIME and 2) SHAP.
GradCAM generates a heatmap of values ranging from 0 to
1, where 0 means no inﬂuence and 1 means highest inﬂuence of
individual pixels towards the model output decision. Similarly,
SHAP method follows a scale for SHAP values. However,
SHAP scale ranges from -0.3 to +0.3 indicating that negative
values decrease output class probability and positive values
increase the output class probability for the corresponding input.
Here 0.3 is the largest SHAP value generated for the set of
four images considered. Gradient visualizations of this ﬁgure
are created using DeepExplain package while visualizations
for Grad-CAM, LIME, and SHAP are created by their own
individual implementations.
Original image column of row (a) in Figure 19 indicates
a correct prediction of an image of a Koala with 94.5%
prediction accuracy, row (b) indicates a correct prediction of
a sandbar image with 38.0% accuracy, row (c) indicates an
incorrect prediction of a horse as an arabian camel with 17.4%
accuracy, and row (d) indicates correct prediction of a leaf
beetle with 95.5% percentage accuracy. We then compare the
explanation maps, in different columns, generated by various
XAI techniques as discussed above.
Focusing on saliency maps, gradient times input, and
integrated gradients in Figure 19, we can visually verify the
improvements achieved by integrated gradients over the prior
gradient-based methods. This is apparent in the images with
lower class probabilities. For example, in row (b), we can verify
that the integrated gradients generated high attributions around
the sandy beach, plastic chairs, and a little bit of the blue
20
Fig. 20. Illustration from [114] showing adversarial attacks involving small perturbations to input layer of neural network. We see that small perturbations
doesn’t affect the accuracy of predictions. However, feature importance maps are highly affected by the small changes. This illustrates the ﬂaws in current
gradient-based techniques.
sky. As human evaluators, we can make sense of this output
because human experience suggests that a sandbar involve
a beach, hopefully on a sunny day with bright blue clouds.
A stark difference is apparent in Grad-CAM visualizations
where the class output generated a heatmap which is focused
primarily on the plastic chair and sandy beach, without much
emphasis on the clouds. Perturbation-based methods such as
LIME and SHAP generated superpixels which maximized
the class probability. Here, we see that LIME is focusing on
primarily the chairs and the sky, whereas SHAP is focusing on
the beach and the sky. We also note that SHAP values generated
are very low, indicating lesser inﬂuence to the conﬁdence score.
D. Limitations of XAI Visualizations and Future Directions
The discussion above brings some important ﬂaws of XAI
visualizations and interpretability techniques - 1) the inability of
human-attention to deduce XAI explanation maps for decision-
making, and 2) unavailability of a quantitative measure of
completeness and correctness of the explanation map. This
suggests that the further use of visualization techniques for
mission-critical applications must be reconsidered moving
forward. Also, better ways of representing and presenting
explanations should be considered. For example, in [115],
Weerts et al. studied the impact of SHAP explanations in
improving human performance for alert processing tasks.
The authors presented a human-grounded study to evaluate
whether certain decision-making scenarios can be improved
by providing explanations to decisions. Results showed that
additional SHAP explanations to class output probability did
not improve the decision-making of individuals. Authors saw
more interest in ﬁnal class score for making decisions which
could be catastrophic in mission-critical scenarios.
Similarly, in [110], Mohseni et al. presented a human-
grounded evaluation benchmark and evaluated performance
of LIME algorithm by comparing the explanation map gen-
erated by LIME to that of weighted explanation map of 10
human annotations. Results suggested that LIME creates some
attributions irrelevant to human explanations which causes
low explanation precision compared to weighted explanation
map generated by human annotators. This sheds light to
the importance of understanding the mode of explanations
as application-grounded, human-grounded, and functionally-
grounded explanations [102] to improve explanation maps
by meta information generated by humans, adding more
constraints to explanations, or introducing formal deﬁnitions
of explanations to the optimization problem.
Several other ﬂaws of explanation map visualization are
explained by researchers in recent publications. In [114],
Ghorbani et al. showed that small perturbations on the input
instance generate large changes in the output interpretations that
popular XAI methods generate. These adversarial examples,
thus threw off the interpretable saliency maps generated by
popular methods such as DeepLIFT and Integrated Gradients.
This is illustrated in Figure 20. Additionally, in [116], Wang
et al. showed that bias term which is often ignored could have
high correlations towards attributions.
In [117], Kindermans et al. explained that explanations of
networks are easily manipulable by simple transformations.
Authors note that expressiveness of Integrated Gradients
[59] and Deep Taylor Decomposition [61] highly depend on
the reference point, for example a baseline image x
′, and
suggest that the reference point should be a hyperparameter
instead of being determined a priori. Authors mentioned that
most gradient-based methods attribute incorrectly to constant
vector transformations and that input invariances should be a
prerequisite for reliable attributions.
In [118], Adebayo et al. suggested that gradient-based
methods are inherently dependent on the model and data gen-
erating process. Authors proposed two randomization tests for
gradient methods namely model parameter randomization test
and data randomization test. Model parameter randomization
test compared the output of saliency method for a trained
model versus the same model with random weights. Data
randomization test applied the same saliency method for an
input instance and the same instance with a set of invariances.
Authors found that Gradients and GradCAM passed the sanity
21
checks while Guided Backprop and Guided GradCAM methods
failed the tests suggesting that these methods will generate
some explanations even without proper training.
Newer methods proposed in literature such as explaining
with Concepts [51], [52], [58] which we discussed in subsection
IV-B4 could be viewed as a new class of meta-explanations
which improve both perturbation- and gradient-based XAI
methods. By exploring explanations as concepts, one could have
additional meta information on the factors which contributed to
individual class predictions along with traditional explanation
by locally explainable algorithms.
In [119], Zhou et al. introduced Interpretable Basis De-
composition as a way of decomposing individual explanation
based on different objects or scenes in the input instance.
By decomposing the decision to several individual concept
explanations, IBD could help evaluate importance of each
concepts towards a particular decision.
In [97], Kindermans et al. suggested improvements to
gradient-based methods and proposed PatternNet and Patter-
nAttribution which can estimate the component of the data
that caused network activations. Here, PatternNet is similar
to ﬁnding gradients but is instead done using a layer-wise
backprojection of the estimated signal (data feature) to the
input space. PatternAttribution improves upon LRP to provide
a neuron-wise attribution of input signal to the corresponding
output class.
VIII. CONCLUSION
Blindly trusting the results of a highly predictive classiﬁer
is, by today’s standard, inadvisable, due to the strong inﬂuence
of data bias, trustability, and adversarial examples in machine
learning. In this survey, we explored why XAI is important,
several facets of XAI, and categorized them in respect of
their scope, methodology, usage, and nature towards explaining
deep neural network algorithms. A summary of the seminal
algorithms explained in the survey are tabulated in Table V.
Our ﬁndings showed that considerable research in XAI is
focused in model-agnostic post-hoc explainability algorithms
due to their easier integration and wider reach. Additionally,
there is a large interest in additive and local surrogate
models using superpixels of information to evaluate the input
feature attributions. Researchers are uncovering limitations
of explanation maps visualizations and we see a shift from
local perturbation- and gradient-based models due to their
shortcomings in adversarial attacks and input invariances. A
new trend in using concepts as explanations are gaining traction.
However, evaluating these methods are still a challenge and
pose an open question in XAI research.
Current research landscape in XAI evaluation illustrates
that the ﬁeld of XAI is still evolving and that XAI methods
should be developed and chosen with care. User studies have
shown that typical explanation maps alone might not aid in
decision making. Human bias in interpreting visual explanations
could hinder proper use of XAI in mission-critical applications.
Recent developments in human-grounded evaluations shows
promising improvements to the XAI evaluation landscape.
REFERENCES
[1] A. D. Torres, H. Yan, A. H. Aboutalebi, A. Das, L. Duan, and P. Rad,
“Patient Facial Emotion Recognition and Sentiment Analysis Using
Secure Cloud With Hardware Acceleration,” Comput. Intell. Multimed.
Big Data Cloud with Eng. Appl., pp. 61–89, 2018.
[2] S. M. Lee, J. B. Seo, J. Yun, Y.-H. Cho, J. Vogel-Claussen, M. L.
Schiebler, W. B. Gefter, E. J. Van Beek, J. M. Goo, K. S. Lee
et al., “Deep learning applications in chest radiography and computed
tomography,” pp. 75–85, 2019.
[3] R. Chen, L. Yang, S. Goodison, and Y. Sun, “Deep-learning approach
to identifying cancer subtypes using high-dimensional genomic data,”
Bioinformatics, vol. 36, no. 5, pp. 1476–1483, 2020.
[4] R. Sayres, A. Taly, E. Rahimy, K. Blumer, D. Coz, N. Hammel, J. Krause,
A. Narayanaswamy, Z. Rastegar, D. Wu et al., “Using a deep learning
algorithm and integrated gradients explanation to assist grading for
diabetic retinopathy,” Ophthalmology, vol. 126, no. 4, pp. 552–564,
2019.
[5] A. Das, P. Rad, K. K. R. Choo, B. Nouhi, J. Lish, and J. Martel,
“Distributed machine learning cloud teleophthalmology IoT for predict-
ing AMD disease progression,” Future Generation Computer Systems,
vol. 93, pp. 486–498, 2019.
[6] J. Son, J. Y. Shin, H. D. Kim, K.-H. Jung, K. H. Park, and S. J. Park,
“Development and validation of deep learning models for screening
multiple abnormal ﬁndings in retinal fundus images,” Ophthalmology,
vol. 127, no. 1, pp. 85–94, 2020.
[7] N. Mohammadian Rad, S. M. Kia, C. Zarbo, T. van Laarhoven,
G. Jurman, P. Venuti, E. Marchiori, and C. Furlanello, “Deep learning
for automatic stereotypical motor movement detection using wearable
sensors in autism spectrum disorders,” Signal Processing, vol. 144, pp.
180–191, Mar 2018.
[8] A. S. Heinsfeld, A. R. Franco, R. C. Craddock, A. Buchweitz, and
F. Meneguzzi, “Identiﬁcation of autism spectrum disorder using deep
learning and the ABIDE dataset,” NeuroImage: Clinical, vol. 17, pp.
16–23, 2018.
[9] S. H. Silva, A. Alaeddini, and P. Najaﬁrad, “Temporal graph traversals
using reinforcement learning with proximal policy optimization,” IEEE
Access, vol. 8, pp. 63 910–63 922, 2020.
[10] C. You, J. Lu, D. Filev, and P. Tsiotras, “Advanced planning for
autonomous vehicles using reinforcement learning and deep inverse
reinforcement learning,” Robotics and Autonomous Systems, vol. 114,
pp. 1–18, Apr 2019.
[11] S. Grigorescu, B. Trasnea, T. Cocias, and G. Macesanu, “A survey of
deep learning techniques for autonomous driving,” Journal of Field
Robotics, vol. 37, no. 3, pp. 362–386, 2020.
[12] D. Feng, C. Haase-Schutz, L. Rosenbaum, H. Hertlein, C. Glaser,
F. Timm, W. Wiesbeck, and K. Dietmayer, “Deep Multi-Modal
Object Detection and Semantic Segmentation for Autonomous Driving:
Datasets, Methods, and Challenges,” IEEE Transactions on Intelligent
Transportation Systems, pp. 1–20, 2020.
[13] A. Sahba, A. Das, P. Rad, and M. Jamshidi, “Image Graph Production
by Dense Captioning,” in 2018 World Autom. Congr., vol. 2018-June.
IEEE, Jun 2018, pp. 1–5.
[14] N. Bendre, N. Ebadi, J. J. Prevost, and P. Najaﬁrad, “Human action
performance using deep neuro-fuzzy recurrent attention model,” IEEE
Access, vol. 8, pp. 57 749–57 761, 2020.
[15] A. Boles and P. Rad, “Voice biometrics: Deep learning-based voiceprint
authentication system,” in 2017 12th System of Systems Engineering
Conference (SoSE).
IEEE, 2017, pp. 1–6.
[16] S. Panwar, A. Das, M. Roopaei, and P. Rad, “A deep learning approach
for mapping music genres,” in 2017 12th System of Systems Engineering
Conference (SoSE).
IEEE, 2017, pp. 1–5.
[17] G. D. L. T. Parra, P. Rad, K.-K. R. Choo, and N. Beebe, “Detecting
internet of things attacks using distributed deep learning,” Journal of
Network and Computer Applications, p. 102662, 2020.
[18] H. Chacon, S. Silva, and P. Rad, “Deep learning poison data attack
detection,” in 2019 IEEE 31st International Conference on Tools with
Artiﬁcial Intelligence (ICTAI).
IEEE, 2019, pp. 971–978.
[19] A. Kwasniewska, M. Szankin, M. Ozga, J. Wolfe, A. Das, A. Zajac,
J. Ruminski, and P. Rad, “Deep Learning Optimization for Edge Devices:
Analysis of Training Quantization Parameters,” IECON 2019 - 45th
Annu. Conf. IEEE Ind. Electron. Soc., pp. 96–101, Oct 2019.
[20] C. Zhang, P. Patras, and H. Haddadi, “Deep learning in mobile and
wireless networking: A survey,” IEEE Communications Surveys &
Tutorials, vol. 21, no. 3, pp. 2224–2287, 2019.
[21] High Level Independent Group on Artiﬁcial Intelligence (AI HLEG),
“Ethics Guidelines for Trustworthy AI,” Euorpean Comm., 2019.
22
[22] C. Cath, S. Wachter, B. Mittelstadt, M. Taddeo, and L. Floridi, “Artiﬁcial
intelligence and the good society: the us, eu, and uk approach,” Science
and engineering ethics, vol. 24, no. 2, pp. 505–528, 2018.
[23] K. H. Keskinbora, “Medical ethics considerations on artiﬁcial intelli-
gence,” Journal of Clinical Neuroscience, vol. 64, pp. 277–282, Jun
2019.
[24] A. Etzioni and O. Etzioni, “Incorporating Ethics into Artiﬁcial In-
telligence,” The Journal of Ethics, vol. 21, no. 4, pp. 403–418, Dec
2017.
[25] N. Bostrom and E. Yudkowsky, “The ethics of artiﬁcial intelligence,”
in The Cambridge Handbook of Artiﬁcial Intelligence, K. Frankish and
W. M. Ramsey, Eds.
Cambridge: Cambridge University Press, 2014,
pp. 316–334.
[26] B. C. Stahl and D. Wright, “Ethics and privacy in ai and big data:
Implementing responsible research and innovation,” IEEE Security &
Privacy, vol. 16, no. 3, pp. 26–33, 2018.
[27] D. S. Weld and G. Bansal, “The challenge of crafting intelligible
intelligence,” Communications of the ACM, vol. 62, no. 6, pp. 70–79,
May 2019.
[28] A. Lui and G. W. Lamb, “Artiﬁcial intelligence and augmented
intelligence collaboration: regaining trust and conﬁdence in the ﬁnancial
sector,” Information & Communications Technology Law, vol. 27, no. 3,
pp. 267–283, Sep 2018.
[29] M. Hengstler, E. Enkel, and S. Duelli, “Applied artiﬁcial intelligence and
trustThe case of autonomous vehicles and medical assistance devices,”
Technological Forecasting and Social Change, vol. 105, pp. 105–120,
Apr 2016.
[30] L. Chen, A. Cruz, S. Ramsey, C. J. Dickson, J. S. Duca, V. Hornak,
D. R. Koes, and T. Kurtzman, “Hidden bias in the dud-e dataset leads
to misleading performance of deep learning in structure-based virtual
screening,” PloS one, vol. 14, no. 8, p. e0220113, 2019.
[31] R. Challen, J. Denny, M. Pitt, L. Gompels, T. Edwards, and K. Tsaneva-
Atanasova, “Artiﬁcial intelligence, bias and clinical safety,” BMJ Quality
& Safety, vol. 28, no. 3, pp. 231–237, Mar 2019.
[32] F. H. Sinz, X. Pitkow, J. Reimer, M. Bethge, and A. S. Tolias,
“Engineering a Less Artiﬁcial Intelligence,” Neuron, vol. 103, no. 6, pp.
967–979, Sep 2019.
[33] O. Osoba and W. Welser, An Intelligence in Our Image: The Risks of
Bias and Errors in Artiﬁcial Intelligence.
RAND Corporation, 2017.
[34] A. Kurakin, I. Goodfellow, and S. Bengio, “Adversarial Machine Learn-
ing at Scale,” 5th International Conference on Learning Representations,
ICLR 2017 - Conference Track Proceedings, Nov 2016.
[35] I. Goodfellow, J. Shlens, and C. Szegedy, “Explaining and harnessing
adversarial examples,” in 3rd International Conference on Learning
Representations, ICLR 2015 - Conference Track Proceedings, 2015.
[36] J. Su, D. V. Vargas, and K. Sakurai, “One Pixel Attack for Fooling Deep
Neural Networks,” IEEE Transactions on Evolutionary Computation,
vol. 23, no. 5, pp. 828–841, Oct 2019.
[37] S. Huang, N. Papernot, I. Goodfellow, Y. Duan, and P. Abbeel,
“Adversarial Attacks on Neural Network Policies,” 5th International
Conference on Learning Representations, ICLR 2017 - Workshop Track
Proceedings, Feb 2017.
[38] T. Miller, “Explanation in artiﬁcial intelligence: Insights from the social
sciences,” pp. 1–38, 2019.
[39] K. Sokol and P. Flach, “Explainability fact sheets: A framework for
systematic assessment of explainable approaches,” in FAT* 2020 -
Proceedings of the 2020 Conference on Fairness, Accountability, and
Transparency, 2020, pp. 56–67.
[40] C. Rudin, “Stop explaining black box machine learning models for high
stakes decisions and use interpretable models instead,” Nature Machine
Intelligence, vol. 1, no. 5, pp. 206–215, May 2019.
[41] D. Doran, S. Schulz, and T. R. Besold, “What does explainable AI really
mean? A new conceptualization of perspectives,” in CEUR Workshop
Proceedings, 2018.
[42] D. Castelvecchi, “Can we open the black box of ai?” Nature News, vol.
538, no. 7623, p. 20, 2016.
[43] A. Adadi and M. Berrada, “Peeking Inside the Black-Box: A Survey
on Explainable Artiﬁcial Intelligence (XAI),” IEEE Access, vol. 6, pp.
52 138–52 160, 2018.
[44] F. K. Dosilovic, M. Brcic, and N. Hlupic, “Explainable artiﬁcial intelli-
gence: A survey,” in 2018 41st International Convention on Information
and Communication Technology, Electronics and Microelectronics,
MIPRO 2018 - Proceedings, 2018.
[45] S. Chakraborty, R. Tomsett, R. Raghavendra, D. Harborne, M. Alzantot,
F. Cerutti, M. Srivastava, A. Preece, S. Julier, R. M. Rao, T. D.
Kelley, D. Braines, M. Sensoy, C. J. Willis, and P. Gurram, “Inter-
pretability of deep learning models: A survey of results,” in 2017
IEEE SmartWorld, Ubiquitous Intelligence & Computing, Advanced &
Trusted Computed, Scalable Computing & Communications, Cloud &
Big Data Computing, Internet of People and Smart City Innovation
(SmartWorld/SCALCOM/UIC/ATC/CBDCom/IOP/SCI).
IEEE, Aug
2017, pp. 1–6.
[46] Z. Zhu, E. Albadawy, A. Saha, J. Zhang, M. R. Harowicz, and M. A.
Mazurowski, “Deep learning for identifying radiogenomic associations
in breast cancer,” Computers in biology and medicine, vol. 109, pp.
85–90, 2019.
[47] D. van Thiel and W. F. F. van Raaij, “Artiﬁcial Intelligent Credit Risk
Prediction: An Empirical Study of Analytical Artiﬁcial Intelligence
Tools for Credit Risk Prediction in a Digital Era,” Journal of Accounting
and Finance, vol. 19, no. 8, Dec 2019.
[48] J. Turiel and T. Aste, “Peer-to-peer loan acceptance and default
prediction with artiﬁcial intelligence,” Royal Society Open Science,
vol. 7, no. 6, p. 191649, 2020.
[49] S. Lapuschkin, S. W¨aldchen, A. Binder, G. Montavon, W. Samek, and
K.-R. M¨uller, “Unmasking Clever Hans predictors and assessing what
machines really learn,” Nature Communications, vol. 10, no. 1, p. 1096,
Dec 2019.
[50] R. Agarwal, N. Frosst, X. Zhang, R. Caruana, and G. E. Hinton, “Neural
additive models: Interpretable machine learning with neural nets,” arXiv
preprint arXiv:2004.13912, 2020.
[51] Y. Goyal, U. Shalit, and B. Kim, “Explaining classiﬁers with causal
concept effect (cace),” arXiv preprint arXiv:1907.07165, 2019.
[52] A. Ghorbani, J. Wexler, J. Y. Zou, and B. Kim, “Towards automatic
concept-based explanations,” in Advances in Neural Information Pro-
cessing Systems, 2019, pp. 9273–9282.
[53] M. Ibrahim, M. Louie, C. Modarres, and J. Paisley, “Global explana-
tions of neural networks: Mapping the landscape of predictions,” in
Proceedings of the 2019 AAAI/ACM Conference on AI, Ethics, and
Society, 2019, pp. 279–287.
[54] H. Li, Y. Tian, K. Mueller, and X. Chen, “Beyond saliency: Under-
standing convolutional neural networks from saliency prediction on
layer-wise relevance propagation,” Image and Vision Computing, vol.
83-84, pp. 70–86, Mar 2019.
[55] C. Burns, J. Thomason, and W. Tansey, “Interpreting Black Box Models
via Hypothesis Testing,” arXiv preprint arXiv:1904.00045, Mar 2019.
[56] A. Chattopadhay, A. Sarkar, P. Howlader, and V. N. Balasubramanian,
“Grad-CAM++: Generalized Gradient-Based Visual Explanations for
Deep Convolutional Networks,” in 2018 IEEE Winter Conference on
Applications of Computer Vision (WACV).
IEEE, Mar 2018, pp. 839–
847.
[57] V. Petsiuk, A. Das, and K. Saenko, “RISE: Randomized Input Sam-
pling for Explanation of Black-box Models,” British Machine Vision
Conference 2018, BMVC 2018, Jun 2018.
[58] B. Kim, M. Wattenberg, J. Gilmer, C. Cai, J. Wexler, F. Viegas, and
R. Sayres, “Interpretability beyond feature attribution: Quantitative
Testing with Concept Activation Vectors (TCAV),” in 35th International
Conference on Machine Learning, ICML 2018, 2018.
[59] M. Sundararajan, A. Taly, and Q. Yan, “Axiomatic attribution for deep
networks,” in 34th International Conference on Machine Learning,
ICML 2017, 2017.
[60] M. Ancona, E. Ceolini, C. ¨Oztireli, and M. Gross, “Towards better
understanding of gradient-based attribution methods for deep neural
networks,” 6th International Conference on Learning Representations,
ICLR 2018 - Conference Track Proceedings, 2018.
[61] G. Montavon, S. Lapuschkin, A. Binder, W. Samek, and K.-R.
M¨uller, “Explaining nonlinear classiﬁcation decisions with deep taylor
decomposition,” Pattern Recognition, vol. 65, pp. 211–222, 2017.
[62] L. M. Zintgraf, T. S. Cohen, T. Adel, and M. Welling, “Visualizing
Deep Neural Network Decisions: Prediction Difference Analysis,” 5th
International Conference on Learning Representations, ICLR 2017 -
Conference Track Proceedings, Feb 2017.
[63] R. R. Selvaraju, M. Cogswell, A. Das, R. Vedantam, D. Parikh, and
D. Batra, “Grad-CAM: Visual Explanations from Deep Networks via
Gradient-Based Localization,” in Proceedings of the IEEE International
Conference on Computer Vision, 2017.
[64] S. M. Lundberg and S. I. Lee, “A uniﬁed approach to interpreting model
predictions,” in Advances in Neural Information Processing Systems,
2017, pp. 4765–4774.
[65] M. T. Ribeiro, S. Singh, and C. Guestrin, “”Why Should I Trust You?”,”
in Proceedings of the 22nd ACM SIGKDD International Conference
on Knowledge Discovery and Data Mining - KDD ’16.
New York,
New York, USA: ACM Press, 2016, pp. 1135–1144.
23
[66] B. Zhou, A. Khosla, A. Lapedriza, A. Oliva, and A. Torralba, “Learning
Deep Features for Discriminative Localization,” in 2016 IEEE Confer-
ence on Computer Vision and Pattern Recognition (CVPR).
IEEE, Jun
2016, pp. 2921–2929.
[67] J. T. Springenberg, A. Dosovitskiy, T. Brox, and M. Riedmiller,
“Striving for simplicity: The all convolutional net,” in 3rd International
Conference on Learning Representations, ICLR 2015 - Workshop Track
Proceedings, 2015.
[68] B. Letham, C. Rudin, T. H. McCormick, and D. Madigan, “Interpretable
classiﬁers using rules and Bayesian analysis: Building a better stroke
prediction model,” The Annals of Applied Statistics, vol. 9, no. 3, pp.
1350–1371, Sep 2015.
[69] S. Bach, A. Binder, G. Montavon, F. Klauschen, K.-R. M¨uller, and
W. Samek, “On Pixel-Wise Explanations for Non-Linear Classiﬁer
Decisions by Layer-Wise Relevance Propagation,” PLOS ONE, vol. 10,
no. 7, p. e0130140, Jul 2015.
[70] R. Caruana, Y. Lou, J. Gehrke, P. Koch, M. Sturm, and N. Elhadad,
“Intelligible models for healthcare: Predicting pneumonia risk and
hospital 30-day readmission,” in Proceedings of the ACM SIGKDD
International Conference on Knowledge Discovery and Data Mining,
2015, pp. 1721–1730.
[71] M. D. Zeiler and R. Fergus, “Visualizing and understanding convolu-
tional networks,” in Computer Vision – ECCV 2014, D. Fleet, T. Pajdla,
B. Schiele, and T. Tuytelaars, Eds.
Cham: Springer International
Publishing, 2014, pp. 818–833.
[72] B. Kim, C. Rudin, and J. Shah, “The Bayesian case model: A generative
approach for case-based reasoning and prototype classiﬁcation,” in
Advances in Neural Information Processing Systems, 2014.
[73] K. Simonyan, A. Vedaldi, and A. Zisserman, “Deep Inside Convolutional
Networks: Visualising Image Classiﬁcation Models and Saliency Maps,”
2nd International Conference on Learning Representations, ICLR 2014
- Workshop Track Proceedings, Dec 2013.
[74] D. Erhan, A. Courville, and Y. Bengio, “Understanding representations
learned in deep architectures,” Department dInformatique et Recherche
Operationnelle, University of Montreal, QC, Canada, Tech. Rep, vol.
1355, p. 1, 2010.
[75] L. Grosenick, S. Greer, and B. Knutson, “Interpretable Classiﬁers for
fMRI Improve Prediction of Purchases,” IEEE Transactions on Neural
Systems and Rehabilitation Engineering, vol. 16, no. 6, pp. 539–548,
Dec 2008.
[76] V. Schetinin, J. E. Fieldsend, D. Partridge, T. J. Coats, W. J. Krzanowski,
R. M. Everson, T. C. Bailey, and A. Hernandez, “Conﬁdent interpretation
of Bayesian decision tree ensembles for clinical applications,” IEEE
Transactions on Information Technology in Biomedicine, 2007.
[77] F. Rossi, “Building trust in artiﬁcial intelligence,” Journal of interna-
tional affairs, vol. 72, no. 1, pp. 127–134, 2018.
[78] T. C. King, N. Aggarwal, M. Taddeo, and L. Floridi, “Artiﬁcial
Intelligence Crime: An Interdisciplinary Analysis of Foreseeable Threats
and Solutions,” Science and Engineering Ethics, vol. 26, no. 1, pp. 89–
120, Feb 2020.
[79] P. ˇCerka, J. Grigien˙e, and G. Sirbikyt˙e, “Liability for damages caused
by artiﬁcial intelligence,” Computer Law & Security Review, vol. 31,
no. 3, pp. 376–389, 2015.
[80] A. B. Arrieta, N. D´ıaz-Rodr´ıguez, J. Del Ser, A. Bennetot, S. Tabik,
A. Barbado, S. Garc´ıa, S. Gil-L´opez, D. Molina, R. Benjamins
et al., “Explainable artiﬁcial intelligence (xai): Concepts, taxonomies,
opportunities and challenges toward responsible ai,” Information Fusion,
vol. 58, pp. 82–115, 2020.
[81] J. Zou and L. Schiebinger, “AI can be sexist and racist it’s time to
make it fair,” Nature, vol. 559, no. 7714, pp. 324–326, Jul 2018.
[82] M. Du, F. Yang, N. Zou, and X. Hu, “Fairness in deep learning: A
computational perspective,” arXiv preprint arXiv:1908.08843, 2019.
[83] S.-K. Yeom, P. Seegerer, S. Lapuschkin, S. Wiedemann, K.-R. M¨uller,
and W. Samek, “Pruning by explaining: A novel criterion for deep
neural network pruning,” arXiv preprint arXiv:1912.08881, 2019.
[84] S. Mishra, B. L. Sturm, and S. Dixon, “Local interpretable model-
agnostic explanations for music content analysis,” in Proc. 18th Int.
Soc. Music Inf. Retr. Conf. ISMIR 2017, 2017, pp. 537–543.
[85] T. Peltola, “Local interpretable model-agnostic explanations of bayesian
predictive models via kullback-leibler projections,” arXiv preprint
arXiv:1810.02678, 2018.
[86] M. Rehman Zafar and N. Mefraz Khan, “Dlime: A deterministic local
interpretable model-agnostic explanations approach for computer-aided
diagnosis systems,” arXiv preprint arXiv:1906.10263, 2019.
[87] S. Bramhall, H. Horn, M. Tieu, and N. Lohia, “Qlime-a quadratic local
interpretable model-agnostic explanation approach,” SMU Data Science
Review, vol. 3, no. 1, p. 4, 2020.
[88] S. Shi, X. Zhang, and W. Fan, “A modiﬁed perturbed sampling method
for local interpretable model-agnostic explanation,” arXiv preprint
arXiv:2002.07434, 2020.
[89] C. Molnar, Interpretable Machine Learning.
Lulu. com, 2020.
[90] L. Antwarg, B. Shapira, and L. Rokach, “Explaining anomalies detected
by autoencoders using shap,” arXiv preprint arXiv:1903.02407, 2019.
[91] M. Sundararajan and A. Najmi, “The many shapley values for model
explanation,” arXiv preprint arXiv:1908.08474, 2019.
[92] K. Aas, M. Jullum, and A. Løland, “Explaining individual predictions
when features are dependent: More accurate approximations to shapley
values,” arXiv preprint arXiv:1903.10464, 2019.
[93] S. M. Lundberg, G. Erion, H. Chen, A. DeGrave, J. M. Prutkin,
B. Nair, R. Katz, J. Himmelfarb, N. Bansal, and S.-I. Lee, “From
local explanations to global understanding with explainable ai for trees,”
Nature machine intelligence, vol. 2, no. 1, pp. 2522–5839, 2020.
[94] M. Vega Garc´ıa and J. L. Aznarte, “Shapley additive explanations for
NO2 forecasting,” Ecol. Inform., vol. 56, p. 101039, Mar 2020.
[95] C.-K. Yeh, B. Kim, S. O. Arik, C.-L. Li, P. Ravikumar, and T. Pﬁster,
“On concept-based explanations in deep neural networks,” arXiv preprint
arXiv:1910.07969, 2019.
[96] A. Mahendran and A. Vedaldi, “Salient Deconvolutional Networks,”
in Lecture Notes in Computer Science (including subseries Lecture
Notes in Artiﬁcial Intelligence and Lecture Notes in Bioinformatics).
Springer, 2016, pp. 120–135.
[97] P.-J. Kindermans, K. T. Sch¨utt, M. Alber, K.-R. M¨uller, D. Erhan,
B. Kim, and S. D¨ahne, “Learning how to explain neural networks:
Patternnet and patternattribution,” 6th International Conference on
Learning Representations, ICLR 2018 - Conference Track Proceedings,
Jan 2018.
[98] A. Shrikumar, P. Greenside, and A. Kundaje, “Learning important
features through propagating activation differences,” in Proceedings of
the 34th International Conference on Machine Learning - Volume 70,
ser. ICML17.
JMLR.org, 2017, p. 31453153.
[99] G. Erion, J. D. Janizek, P. Sturmfels, S. Lundberg, and S.-I. Lee,
“Learning Explainable Models Using Attribution Priors,” arXiv preprint
arXiv:1906.10670, Jun 2019.
[100] H. Yang, C. Rudin, and M. Seltzer, “Scalable Bayesian rule lists,” in
34th International Conference on Machine Learning, ICML 2017, 2017.
[101] F. Doshi-Velez, B. C. Wallace, and R. Adams, “Graph-sparse lda: A
topic model with structured sparsity,” in Proceedings of the Twenty-
Ninth AAAI Conference on Artiﬁcial Intelligence, ser. AAAI15.
AAAI
Press, 2015, p. 25752581.
[102] F. Doshi-Velez and B. Kim, “Towards a rigorous science of interpretable
machine learning,” arXiv preprint arXiv:1702.08608, 2017.
[103] R. Elshawi, Y. Sherif, M. Al-Mallah, and S. Sakr, “Interpretability in
healthcare a comparative study of local machine learning interpretability
techniques,” in Proc. - IEEE Symp. Comput. Med. Syst., 2019.
[104] A. Holzinger, A. Carrington, and H. M¨uller, “Measuring the Quality of
Explanations: The System Causability Scale (SCS),” KI - K¨unstliche
Intelligenz, pp. 193–198, 2020.
[105] M. Yang and B. Kim, “Benchmarking Attribution Methods with Relative
Feature Importance,” CoRR, vol. abs/1907.09701, 2019.
[106] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ramanan,
P. Doll´ar, and C. L. Zitnick, “Microsoft coco: Common objects in
context,” in European conference on computer vision.
Springer, 2014,
pp. 740–755.
[107] B. Zhou, A. Lapedriza, A. Khosla, A. Oliva, and A. Torralba, “Places:
A 10 Million Image Database for Scene Recognition,” IEEE Trans.
Pattern Anal. Mach. Intell., vol. 40, no. 6, pp. 1452–1464, Jun 2018.
[108] D. A. Melis and T. Jaakkola, “Towards robust interpretability with
self-explaining neural networks,” in Advances in Neural Information
Processing Systems, 2018, pp. 7775–7784.
[109] R. Luss, P.-Y. Chen, A. Dhurandhar, P. Sattigeri, K. Shanmugam, and
C.-C. Tu, “Generating contrastive explanations with monotonic attribute
functions,” arXiv preprint arXiv:1905.12698, 2019.
[110] S. Mohseni and E. D. Ragan, “A human-grounded evaluation bench-
mark for local explanations of machine learning,” arXiv preprint
arXiv:1801.05075, 2018.
[111] J. Deng, W. Dong, R. Socher, L. Li, Kai Li, and Li Fei-Fei, “Imagenet:
A large-scale hierarchical image database,” in 2009 IEEE Conference
on Computer Vision and Pattern Recognition, 2009, pp. 248–255.
[112] C. A. Stewart, T. M. Cockerill, I. Foster, D. Hancock, N. Merchant,
E. Skidmore, D. Stanzione, J. Taylor, S. Tuecke, G. Turner et al.,
“Jetstream: a self-provisioned, scalable science and engineering cloud
environment,” in Proceedings of the 2015 XSEDE Conference: Scientiﬁc
Advancements Enabled by Enhanced Cyberinfrastructure, 2015, pp. 1–8.
24
[113] C. Molnar, G. Casalicchio, and B. Bischl, “iml: An r package for
interpretable machine learning,” Journal of Open Source Software,
vol. 3, no. 26, p. 786, 2018.
[114] A. Ghorbani, A. Abid, and J. Zou, “Interpretation of neural networks is
fragile,” in Proceedings of the AAAI Conference on Artiﬁcial Intelligence,
vol. 33, 2019, pp. 3681–3688.
[115] H. J. Weerts, W. van Ipenburg, and M. Pechenizkiy, “A human-
grounded evaluation of shap for alert processing,” arXiv preprint
arXiv:1907.03324, 2019.
[116] S. Wang, T. Zhou, and J. Bilmes, “Bias also matters: Bias attribution
for deep neural network explanation,” in International Conference on
Machine Learning, 2019, pp. 6659–6667.
[117] P.-J. Kindermans, S. Hooker, J. Adebayo, M. Alber, K. T. Sch¨utt,
S. D¨ahne, D. Erhan, and B. Kim, “The (un) reliability of saliency
methods,” in Explainable AI: Interpreting, Explaining and Visualizing
Deep Learning.
Springer, 2019, pp. 267–280.
[118] J. Adebayo, J. Gilmer, M. Muelly, I. Goodfellow, M. Hardt, and B. Kim,
“Sanity checks for saliency maps,” in Advances in Neural Information
Processing Systems, 2018, pp. 9505–9515.
[119] B. Zhou, Y. Sun, D. Bau, and A. Torralba, “Interpretable basis
decomposition for visual explanation,” in Proceedings of the European
Conference on Computer Vision (ECCV), 2018, pp. 119–134.
Arun Das is currently a Ph.D. student and research
fellow at the Secure AI and Autonomy Lab and Open
Cloud Institute of University of Texas at San Antonio
(UTSA), San Antonio, TX, USA. Arun received the
Bachelor of Technology (B.Tech.) degree in Electrical
and Electronics Engineering from Cochin University
of Science and Technology, Kerala, India, in 2013 and
the M.S. degree in Computer Engineering from the
University of Texas at San Antonio, San Antonio, TX,
USA in 2016. He was a recipient of the UTSA Brain
Health Consortium Graduate Student Seed Grant
in 2020 for his work in behavior analytics for children with neurotypical
disabilities. He is a member of the IEEE, and IEEE Eta Kappa Nu honor
society. Arun’s research interests are in the areas of artiﬁcial intelligence,
computer vision, distributed and parallel computing, cloud computing, and
computer architecture.
Peyman Najaﬁrad (Paul Rad) received the PhD.
degree in electrical and computer engineering on
cyber analytics from the University of Texas at San
Antonio, San Antonio, TX, USA. He is the founder
and director of the Secure AI and Autonomy Lab,
and an Associate Professor with the information
systems and cyber security (ISCS) from University
of Texas at San Antonio. He has received his ﬁrst
B.S. degree from Sharif University of Technology
in Computer Engineering in 1994, his 1st master in
artiﬁcial intelligence from the Tehran Polytechnic,
the 2nd master in computer science from the University of Texas at San
Antonio (Magna Cum Laude) in December 1999, and the Ph.D. in electrical
and computer engineering from the University of Texas at San Antonio. He
was a recipient of the Most Outstanding Graduate Student in the College of
Engineering, 2016, Achieving Rackspace Innovation Mentor Program Award
for establishing Rackspace patent community board structure and mentoring
employees, 2012, Achieving Dell Corporation Company Excellence (ACE)
Award in Austin for exceptional performance and innovative product research
and development contributions, 2007, and Dell Inventor Milestone Award,
Top 3 Dell Inventor of the year, 2005.He holds 15 U.S. patents on cyber
infrastructure, cloud computing, and big data analytics with over 300 product
citations by top fortune 500 leading technology companies such as Amazon,
Microsoft, IBM, Cisco, Amazon Technologies, HP, and VMware. He has
advised over 200 companies on cloud computing and data analytics with over
50 keynote presentations. He serves on the advisory board for several startups,
high performance cloud group chair at the Cloud Advisory Council (CAC),
OpenStack Foundation Member, the number 1 open source cloud software,
San Antonio Tech Bloc Founding Member, Childrens Hospital of San Antonio
Foundation board member.
